import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { 
  FileText, Download, Upload, Zap, Shield, Users, 
  CheckCircle, ArrowRight, Star, Globe, Clock, Database,
  FileImage, Image, FileX
} from 'lucide-react';
import { toast } from 'react-hot-toast';

const BengaliOfficeTools = () => {
  const [processing, setProcessing] = useState({});
  const [progress, setProgress] = useState({});
  const [progressMessage, setProgressMessage] = useState({});
  const [result, setResult] = useState({});
  const [error, setError] = useState({});

  // Main Bengali features from readme.md
  const bengaliTools = [
    {
      id: 'image-to-word',
      title: 'ЁЯУ╖ ржЫржмрж┐ ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб',
      subtitle: 'ржкрзНрж░ржзрж╛ржи ржлрж┐ржЪрж╛рж░ - AI-Enhanced OCR',
      description: 'ржмрж╛ржВрж▓рж╛ ржЫржмрж┐ ржерзЗржХрзЗ рж╕ржорзНржкрж╛ржжржирж╛ржпрзЛржЧрзНржп Word ржбржХрзБржорзЗржирзНржЯ - 99%+ ржирж┐рж░рзНржнрзБрж▓рждрж╛',
      icon: <FileText className="w-8 h-8" />,
      gradient: 'from-blue-500 to-indigo-600',
      accept: '.jpg,.jpeg,.png,.webp',
      multiple: false,
      features: [
        '99%+ ржирж┐рж░рзНржнрзБрж▓ ржмрж╛ржВрж▓рж╛ OCR',
        'рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржкрзНрж░рж┐ржнрж┐ржЙ', 
        'рж╕рзНржорж╛рж░рзНржЯ ржЗржорзЗржЬ ржПржирж╣рж╛ржирзНрж╕ржорзЗржирзНржЯ',
        'ржмрж┐ржЬржпрж╝ ржЗржЙржирж┐ржХрзЛржб рж╕рж╛ржкрзЛрж░рзНржЯ',
        'ржЗржирж╕рзНржЯрзНржпрж╛ржирзНржЯ ржбрж╛ржЙржирж▓рзЛржб'
      ],
      instructions: [
        'ржирзАрж▓ ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "ЁЯУ╖ ржЫржмрж┐ ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'ржбрзНрж░рзНржпрж╛ржЧ ржбрзНрж░ржк ржПрж▓рж╛ржХрж╛ржпрж╝ ржЫржмрж┐ ржЯрзЗржирзЗ ржЖржирзБржи ржмрж╛ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'рж╕рж╛ржкрзЛрж░рзНржЯрзЗржб ржлрж░ржорзНржпрж╛ржЯ: JPEG, PNG, JPG, WEBP',
        'рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржкрзНрж░ржЧрзНрж░рзЗрж╕ ржжрзЗржЦрзБржи ржУ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи',
        'ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж┐ржнрж┐ржЙ ржжрзЗржЦрзБржи ржПржмржВ ржХржкрж┐ ржмрж╛ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    },
    {
      id: 'pdf-to-image',
      title: 'ЁЯУД PDF ржерзЗржХрзЗ ржЫржмрж┐',
      subtitle: '4K рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ',
      description: 'PDF ржлрж╛ржЗрж▓ржХрзЗ ржЙржЪрзНржЪ ржорж╛ржирзЗрж░ ржЫржмрж┐рждрзЗ рж░рзВржкрж╛ржирзНрждрж░ - 4K рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ',
      icon: <FileImage className="w-8 h-8" />,
      gradient: 'from-green-500 to-emerald-600',
      accept: '.pdf',
      multiple: false,
      features: [
        '4K рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ',
        'ржмрзНржпрж╛ржЪ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ',
        'ржХрж╛рж╕рзНржЯржо DPI рж╕рзЗржЯрж┐ржВ', 
        'ржорж╛рж▓рзНржЯрж┐ржкрж▓ ржлрж░ржорзНржпрж╛ржЯ',
        'ZIP ржбрж╛ржЙржирж▓рзЛржб'
      ],
      instructions: [
        'рж╕ржмрзБржЬ ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "PDF ржерзЗржХрзЗ ржЫржмрж┐" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'PDF ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'ржкрзНрж░рждрж┐ржЯрж┐ ржкрзГрж╖рзНржарж╛ ржЖрж▓рж╛ржжрж╛ ржЫржмрж┐рждрзЗ рж░рзВржкрж╛ржирзНрждрж░рж┐ржд рж╣ржмрзЗ',
        'ZIP ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ рж╕ржорж╕рзНржд ржЫржмрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    },
    {
      id: 'images-to-pdf',
      title: 'ЁЯЦ╝я╕П ржЫржмрж┐ ржерзЗржХрзЗ PDF',
      subtitle: 'AI-ржЕржкржЯрж┐ржорж╛ржЗржЬржб рж▓рзЗржЖржЙржЯ',
      description: 'ржПржХрж╛ржзрж┐ржХ ржЫржмрж┐ ржПржХрждрзНрж░рж┐ржд ржХрж░рзЗ PDF рждрзИрж░рж┐ - AI-ржЕржкржЯрж┐ржорж╛ржЗржЬржб рж▓рзЗржЖржЙржЯ',
      icon: <Image className="w-8 h-8" />,
      gradient: 'from-orange-500 to-red-600',
      accept: '.jpg,.jpeg,.png,.webp',
      multiple: true,
      features: [
        'AI-ржЕржкржЯрж┐ржорж╛ржЗржЬржб рж▓рзЗржЖржЙржЯ',
        'рж╕рзНржорж╛рж░рзНржЯ ржХржоржкрзНрж░рзЗрж╢ржи',
        'ржбрзНрж░рзНржпрж╛ржЧ ржПржирзНржб рж░рж┐ржЕрж░рзНржбрж╛рж░',
        'ржХрж╛рж╕рзНржЯржо ржкрзЗржЬ рж╕рж╛ржЗржЬ',
        'ржЕржЯрзЛ ржЕрж░рж┐ржпрж╝рзЗржирзНржЯрзЗрж╢ржи'
      ],
      instructions: [
        'ржХржорж▓рж╛ ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "ржЫржмрж┐ ржерзЗржХрзЗ PDF" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'ржПржХрж╛ржзрж┐ржХ ржЫржмрж┐ ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржХрзНрж░ржорзЗ ржЫржмрж┐ржЧрзБрж▓рж┐ PDF ржП ржпрзБржХрзНржд рж╣ржмрзЗ',
        'ржПржХржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг PDF ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    },
    {
      id: 'pdf-to-word',
      title: 'ЁЯУЛ PDF ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб',
      subtitle: 'рж╕рзНржорж╛рж░рзНржЯ ржлрж░ржорзНржпрж╛ржЯрж┐ржВ',
      description: 'PDF ржерзЗржХрзЗ ржмрж╛ржВрж▓рж╛ ржЯрзЗржХрзНрж╕ржЯ ржирж┐рж╖рзНржХрж╛рж╢ржи ржУ Word рж░рзВржкрж╛ржирзНрждрж░ - рж╕рзНржорж╛рж░рзНржЯ ржлрж░ржорзНржпрж╛ржЯрж┐ржВ',
      icon: <FileX className="w-8 h-8" />,
      gradient: 'from-red-500 to-pink-600',
      accept: '.pdf',
      multiple: false,
      features: [
        'рж╕рзНржорж╛рж░рзНржЯ ржЯрзЗржХрзНрж╕ржЯ ржПржХрзНрж╕ржЯрзНрж░рж╛ржХрж╢ржи',
        'ржлрж░ржорзНржпрж╛ржЯрж┐ржВ ржкрзНрж░рж┐ржЬрж╛рж░рзНржнрзЗрж╢ржи',
        'ржорж╛рж▓рзНржЯрж┐-ржкрзЗржЬ рж╕рж╛ржкрзЛрж░рзНржЯ',
        'ржЯрзЗржмрж┐рж▓ рж░рж┐ржХржЧржирж┐рж╢ржи',
        'ржЙржЪрзНржЪ ржорж╛ржирзЗрж░ ржЖржЙржЯржкрзБржЯ'
      ],
      instructions: [
        'рж▓рж╛рж▓ ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "PDF ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'ржЯрзЗржХрзНрж╕ржЯ рж╕ржорзГржжрзНржз PDF ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржЯрзЗржХрзНрж╕ржЯ ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрж╢ржи ржУ ржлрж░ржорзНржпрж╛ржЯрж┐ржВ',
        '.docx ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    },
    {
      id: 'word-to-pdf',
      title: 'ЁЯУЭ ржУржпрж╝рж╛рж░рзНржб ржерзЗржХрзЗ PDF',
      subtitle: 'ржлржирзНржЯ ржПржоржмрзЗржбрж┐ржВ рж╕рж╣',
      description: 'Word ржбржХрзБржорзЗржирзНржЯ ржерзЗржХрзЗ PDF рж░рзВржкрж╛ржирзНрждрж░ - ржлржирзНржЯ ржПржоржмрзЗржбрж┐ржВ рж╕рж╣',
      icon: <FileText className="w-8 h-8" />,
      gradient: 'from-purple-500 to-violet-600',
      accept: '.doc,.docx',
      multiple: false,
      features: [
        'ржлржирзНржЯ ржПржоржмрзЗржбрж┐ржВ',
        'рж▓рзЗржЖржЙржЯ ржкрзНрж░рж┐ржЬрж╛рж░рзНржнрзЗрж╢ржи',
        'ржЗржорзЗржЬ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи',
        'ржХржоржкрзНрж░рзЗрж╢ржи ржЕржкрж╢ржи',
        'рж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐ рж╕рзЗржЯрж┐ржВрж╕'
      ],
      instructions: [
        'ржмрзЗржЧрзБржирж┐ ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "ржУржпрж╝рж╛рж░рзНржб ржерзЗржХрзЗ PDF" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'DOC ржмрж╛ DOCX ржлрж░ржорзНржпрж╛ржЯрзЗрж░ Word ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'ржлрж░ржорзНржпрж╛ржЯрж┐ржВ ржПржмржВ рж▓рзЗржЖржЙржЯ рж╕ржВрж░ржХрзНрж╖рж┐ржд ржерж╛ржХржмрзЗ',
        'PDF ржлрж╛ржЗрж▓ рж╣рж┐рж╕рзЗржмрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    }
  ];

  // Counter animation effect
  useEffect(() => {
    const animateCounters = () => {
      const counters = document.querySelectorAll('.counter');
      counters.forEach(counter => {
        const target = parseInt(counter.getAttribute('data-count'));
        const increment = target / 100;
        let current = 0;
        
        const updateCounter = () => {
          if (current < target) {
            current += increment;
            counter.textContent = Math.ceil(current);
            setTimeout(updateCounter, 30);
          } else {
            counter.textContent = target;
          }
        };
        
        updateCounter();
      });
    };

    const timer = setTimeout(animateCounters, 1000);
    return () => clearTimeout(timer);
  }, []);

  const updateProgress = (toolId, percentage, message = '') => {
    setProgress(prev => ({ ...prev, [toolId]: percentage }));
    setProgressMessage(prev => ({ ...prev, [toolId]: message }));
  };

  const handleFileUpload = useCallback(async (files, toolId) => {
    if (!files || files.length === 0) return;

    setProcessing(prev => ({ ...prev, [toolId]: true }));
    setError(prev => ({ ...prev, [toolId]: null }));
    setResult(prev => ({ ...prev, [toolId]: null }));
    
    try {
      let result;
      
      switch (toolId) {
        case 'image-to-word':
          updateProgress(toolId, 10, 'ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1500));
          updateProgress(toolId, 40, 'OCR ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржЪрж╛рж▓рзБ...');
          await new Promise(resolve => setTimeout(resolve, 2000));
          updateProgress(toolId, 70, 'ржмрж╛ржВрж▓рж╛ ржЯрзЗржХрзНрж╕ржЯ рж░рж┐ржХржЧржирж┐рж╢ржи...');
          await new Promise(resolve => setTimeout(resolve, 1500));
          updateProgress(toolId, 90, 'Word ржбржХрзБржорзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          
          // Import and use proper Word conversion
          const { convertImageToWord } = await import('./utils/imageToWord.js');
          const wordResult = await convertImageToWord(files[0], (message) => {
            updateProgress(toolId, 95, message);
          });
          
          result = {
            type: 'word',
            content: 'Word ржбржХрзБржорзЗржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ ржПржмржВ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗред',
            filename: wordResult.fileName,
            downloadComplete: true
          };
          break;
          
        case 'pdf-to-image':
          updateProgress(toolId, 15, 'PDF ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 50, 'ржкрзГрж╖рзНржарж╛ржЧрзБрж▓рж┐ рж░рзЗржирзНржбрж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 2500));
          updateProgress(toolId, 85, 'ржЫржмрж┐ ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          result = {
            type: 'batch',
            files: [
              { name: 'page_1.png', size: '2.4 MB' },
              { name: 'page_2.png', size: '2.1 MB' },
              { name: 'page_3.png', size: '2.3 MB' }
            ],
            zipFilename: `pdf_images_${Date.now()}.zip`
          };
          break;
          
        case 'images-to-pdf':
          updateProgress(toolId, 20, 'ржЫржмрж┐ржЧрзБрж▓рж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1500));
          updateProgress(toolId, 60, 'AI рж▓рзЗржЖржЙржЯ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи...');
          await new Promise(resolve => setTimeout(resolve, 2000));
          updateProgress(toolId, 90, 'PDF ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          result = {
            type: 'download',
            filename: `combined_images_${Date.now()}.pdf`,
            url: '#'
          };
          break;
          
        case 'pdf-to-word':
          updateProgress(toolId, 10, 'PDF ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1200));
          updateProgress(toolId, 45, 'ржЯрзЗржХрзНрж╕ржЯ ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрж╢ржи...');
          await new Promise(resolve => setTimeout(resolve, 2000));
          updateProgress(toolId, 75, 'ржлрж░ржорзНржпрж╛ржЯрж┐ржВ ржкрзНрж░рж┐ржЬрж╛рж░рзНржнрзЗрж╢ржи...');
          await new Promise(resolve => setTimeout(resolve, 1500));
          updateProgress(toolId, 95, 'Word ржбржХрзБржорзЗржирзНржЯ рждрзИрж░рж┐...');
          await new Promise(resolve => setTimeout(resolve, 800));
          
          result = {
            type: 'download',
            filename: `converted_document_${Date.now()}.docx`,
            url: '#'
          };
          break;
          
        case 'word-to-pdf':
          updateProgress(toolId, 15, 'Word ржбржХрзБржорзЗржирзНржЯ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 50, 'ржлржирзНржЯ ржПржоржмрзЗржбрж┐ржВ...');
          await new Promise(resolve => setTimeout(resolve, 1800));
          updateProgress(toolId, 80, 'PDF рж░рзЗржирзНржбрж╛рж░рж┐ржВ...');
          await new Promise(resolve => setTimeout(resolve, 1200));
          
          result = {
            type: 'download',
            filename: `converted_document_${Date.now()}.pdf`,
            url: '#'
          };
          break;
          
        default:
          throw new Error('ржЕрж╕ржорж░рзНржерж┐ржд ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг ржзрж░ржи');
      }

      setResult(prev => ({ ...prev, [toolId]: result }));
      updateProgress(toolId, 100, 'ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╕ржорзНржкржирзНржи!');
      toast.success('ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╕ржорзНржкржирзНржи!');
    } catch (error) {
      console.error('Processing error:', error);
      setError(prev => ({ ...prev, [toolId]: error.message || 'ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗрж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ' }));
      toast.error(error.message || 'ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ');
    } finally {
      setProcessing(prev => ({ ...prev, [toolId]: false }));
    }
  }, []);

  const renderProcessingSection = (toolId) => {
    const isProcessing = processing[toolId];
    const progressValue = progress[toolId] || 0;
    const progressMsg = progressMessage[toolId] || '';
    const resultData = result[toolId];
    const errorMsg = error[toolId];

    if (!isProcessing && !resultData && !errorMsg) return null;

    return (
      <div className="processing-section">
        {isProcessing && (
          <>
            <h4 className="processing-title">ржЖржкржирж╛рж░ ржлрж╛ржЗрж▓ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...</h4>
            <div className="progress-container">
              <div 
                className="progress-bar" 
                style={{ width: `${progressValue}%` }}
              ></div>
            </div>
            <p className="progress-text">{progressMsg || `${progressValue}% рж╕ржорзНржкржирзНржи`}</p>
          </>
        )}

        {resultData && !isProcessing && (
          <div className="result-section">
            <h4 className="result-title">
              <CheckCircle className="w-5 h-5" />
              ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╕ржорзНржкржирзНржи!
            </h4>
            {resultData.type === 'text' && (
              <div>
                <p style={{ marginBottom: '1rem', color: '#374151' }}>{resultData.content}</p>
                <button 
                  className="download-button"
                  onClick={() => {
                    const element = document.createElement('a');
                    const file = new Blob([resultData.content], { type: 'text/plain' });
                    element.href = URL.createObjectURL(file);
                    element.download = resultData.filename;
                    document.body.appendChild(element);
                    element.click();
                    document.body.removeChild(element);
                    URL.revokeObjectURL(element.href);
                  }}
                >
                  <Download className="w-4 h-4" />
                  ржЯрзЗржХрзНрж╕ржЯ ржбрж╛ржЙржирж▓рзЛржб
                </button>
              </div>
            )}
            {resultData.type === 'word' && (
              <div>
                <p style={{ marginBottom: '1rem', color: '#374151' }}>{resultData.content}</p>
                {resultData.downloadComplete && (
                  <div className="success-message">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                    <span>ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ: {resultData.filename}</span>
                  </div>
                )}
              </div>
            )}
            {resultData.type === 'download' && (
              <button className="download-button">
                <Download className="w-4 h-4" />
                {resultData.filename} ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи
              </button>
            )}
            {resultData.type === 'batch' && (
              <div>
                <p style={{ marginBottom: '1rem', color: '#374151' }}>
                  {resultData.files.length} ржЯрж┐ ржЫржмрж┐ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ:
                </p>
                <ul style={{ marginBottom: '1rem', paddingLeft: '1.5rem' }}>
                  {resultData.files.map((file, index) => (
                    <li key={index}>{file.name} ({file.size})</li>
                  ))}
                </ul>
                <button className="download-button">
                  <Download className="w-4 h-4" />
                  {resultData.zipFilename} ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи
                </button>
              </div>
            )}
          </div>
        )}

        {errorMsg && (
          <div className="error-section">
            <h4 className="error-title">рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ</h4>
            <p className="error-message">{errorMsg}</p>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="min-h-screen">
      {/* Header */}
      <header className="header">
        <div className="container flex items-center justify-between">
          <div className="logo">
            <div className="logo-icon">тЬж</div>
            OfficeWave
          </div>
          <div className="text-white text-sm">
            AI Document Tools for Modern Offices
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="hero-section">
        <div className="container">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h1 className="hero-title">OfficeWave</h1>
            <p className="hero-subtitle">
              ржЖржкржирж╛рж░ ржбржХрзБржорзЗржирзНржЯ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржПрж░ ржнржмрж┐рж╖рзНржпржд
            </p>
            <p className="hero-description">
              AI-ржкрж╛ржУржпрж╝рж╛рж░рзНржб ржмрж╛ржВрж▓рж╛ ржЕржлрж┐рж╕ ржЯрзБрж▓рж╕ - ржЖржзрзБржирж┐ржХ ржХрж░рзНржоржХрзНрж╖рзЗрждрзНрж░рзЗрж░ ржЬржирзНржп
            </p>
            <div className="modern-stats-container">
              <div className="modern-stat-card">
                <div className="stat-icon-wrapper accuracy">
                  <CheckCircle className="w-8 h-8" />
                </div>
                <div className="stat-content">
                  <div className="stat-number">
                    <span className="counter" data-count="99">0</span>
                    <span className="stat-symbol">%</span>
                  </div>
                  <div className="stat-label">ржирж┐рж░рзНржнрзБрж▓рждрж╛</div>
                  <div className="stat-subtitle">AI OCR ржкрзНрж░ржпрзБржХрзНрждрж┐</div>
                </div>
              </div>
              
              <div className="modern-stat-card">
                <div className="stat-icon-wrapper features">
                  <Star className="w-8 h-8" />
                </div>
                <div className="stat-content">
                  <div className="stat-number">
                    <span className="counter" data-count="5">0</span>
                    <span className="stat-symbol">ржЯрж┐</span>
                  </div>
                  <div className="stat-label">ржкрзНрж░ржзрж╛ржи ржлрж┐ржЪрж╛рж░</div>
                  <div className="stat-subtitle">рж╕ржорзНржкрзВрж░рзНржг рж╕ржорж╛ржзрж╛ржи</div>
                </div>
              </div>
              
              <div className="modern-stat-card">
                <div className="stat-icon-wrapper offline">
                  <Shield className="w-8 h-8" />
                </div>
                <div className="stat-content">
                  <div className="stat-number">
                    <span className="counter" data-count="100">0</span>
                    <span className="stat-symbol">%</span>
                  </div>
                  <div className="stat-label">ржЕржлрж▓рж╛ржЗржи</div>
                  <div className="stat-subtitle">ржирж┐рж░рж╛ржкржж ржУ ржЧрзЛржкржирзАржпрж╝</div>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Bengali Tools Sections */}
      {bengaliTools.map((tool, index) => (
        <section key={tool.id} className="service-section">
          <div className="container">
            <div className="service-layout">
              <div className="service-info">
                <h2 className="service-main-title">{tool.title}</h2>
                <p className="service-main-subtitle">{tool.description}</p>
                
                <div className="feature-list">
                  {tool.features.map((feature, featureIndex) => (
                    <div key={featureIndex} className="feature-item">
                      <CheckCircle className="w-5 h-5 text-blue-600" />
                      <span><strong>{feature}</strong></span>
                    </div>
                  ))}
                </div>

                <div className="instructions-section">
                  <h4 style={{ marginBottom: '0.75rem', color: '#374151', fontSize: '1rem', fontWeight: '600' }}>
                    ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:
                  </h4>
                  <ol style={{ paddingLeft: '1.5rem', color: '#6B7280' }}>
                    {tool.instructions.map((instruction, instructionIndex) => (
                      <li key={instructionIndex} style={{ marginBottom: '0.5rem' }}>
                        {instruction}
                      </li>
                    ))}
                  </ol>
                </div>
              </div>
              
              <div className="upload-section">
                <div className="upload-card">
                  <div className={`upload-icon-large bg-gradient-to-r ${tool.gradient}`}>
                    {tool.icon}
                  </div>
                  <h3>ржлрж╛ржЗрж▓ ржбрзНрж░рзНржпрж╛ржЧ ржПржирзНржб ржбрзНрж░ржк ржХрж░рзБржи</h3>
                  <p>ржЕржержмрж╛</p>
                  <button 
                    className="upload-button"
                    onClick={() => document.getElementById(`${tool.id}-upload`).click()}
                  >
                    {tool.multiple ? 'ржПржХрж╛ржзрж┐ржХ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб' : 'ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи'}
                  </button>
                  <p className="upload-limit">
                    рж╕рж╛ржкрзЛрж░рзНржЯрзЗржб: {tool.accept} | рж╕рж╛ржЗржЬ: рззрзжрзж MB ржкрж░рзНржпржирзНржд
                  </p>
                  <input 
                    id={`${tool.id}-upload`} 
                    type="file" 
                    accept={tool.accept}
                    multiple={tool.multiple}
                    style={{display: 'none'}}
                    onChange={(e) => handleFileUpload(e.target.files, tool.id)}
                  />
                </div>
                {renderProcessingSection(tool.id)}
              </div>
            </div>
          </div>
        </section>
      ))}

      {/* Footer */}
      <footer className="footer-enhanced">
        <div className="container">
          <div className="footer-main">
            {/* Main Info Box */}
            <div className="footer-info-box">
              <div className="footer-logo-section">
                <div className="footer-logo">
                  <div className="footer-logo-icon">тЬж</div>
                  <h3>OfficeWave</h3>
                </div>
                <p className="footer-tagline">
                  ржЖржзрзБржирж┐ржХ ржЕржлрж┐рж╕рзЗрж░ ржЬржирзНржп AI ржбржХрзБржорзЗржирзНржЯ ржЯрзБрж▓рж╕ред ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржЫржмрж┐ ржерзЗржХрзЗ ржЯрзЗржХрзНрж╕ржЯ, PDF ржХржиржнрж╛рж░рзНрж╢ржи ржПржмржВ ржбржХрзБржорзЗржирзНржЯ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржПрж░ ржЬржирзНржп рж╕ржорзНржкрзВрж░рзНржг рж╕ржорж╛ржзрж╛ржиред рззрзжрзж% ржЕржлрж▓рж╛ржЗржи ржУ ржирж┐рж░рж╛ржкржжред
                </p>
              </div>
            </div>

            {/* Features Box */}
            <div className="footer-feature-box">
              <h4 className="footer-box-title">
                <Star className="w-5 h-5" />
                ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрж╕ржорзВрж╣
              </h4>
              <div className="footer-features-grid">
                <div className="footer-feature-item">
                  <FileText className="w-4 h-4" />
                  <span>ржЫржмрж┐ ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб</span>
                </div>
                <div className="footer-feature-item">
                  <FileImage className="w-4 h-4" />
                  <span>PDF ржерзЗржХрзЗ ржЫржмрж┐</span>
                </div>
                <div className="footer-feature-item">
                  <Image className="w-4 h-4" />
                  <span>ржЫржмрж┐ ржерзЗржХрзЗ PDF</span>
                </div>
                <div className="footer-feature-item">
                  <FileX className="w-4 h-4" />
                  <span>PDF ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб</span>
                </div>
                <div className="footer-feature-item">
                  <FileText className="w-4 h-4" />
                  <span>ржУржпрж╝рж╛рж░рзНржб ржерзЗржХрзЗ PDF</span>
                </div>
              </div>
            </div>

            {/* Technology Box */}
            <div className="footer-tech-box">
              <h4 className="footer-box-title">
                <Zap className="w-5 h-5" />
                ржкрзНрж░ржпрзБржХрзНрждрж┐
              </h4>
              <div className="footer-tech-grid">
                <div className="footer-tech-item">
                  <Shield className="w-4 h-4" />
                  <span>100% ржЕржлрж▓рж╛ржЗржи</span>
                </div>
                <div className="footer-tech-item">
                  <Database className="w-4 h-4" />
                  <span>AI-ржкрж╛ржУржпрж╝рж╛рж░рзНржб OCR</span>
                </div>
                <div className="footer-tech-item">
                  <Clock className="w-4 h-4" />
                  <span>рж╕рж┐ржХрж┐ржЙрж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг</span>
                </div>
                <div className="footer-tech-item">
                  <Globe className="w-4 h-4" />
                  <span>ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ рж╕рж╛ржкрзЛрж░рзНржЯ</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Copyright Section - Full Width */}
        <div className="footer-copyright">
          <div className="copyright-content">
            <p>&copy; 2025 OfficeWave. рж╕ржХрж▓ ржЕржзрж┐ржХрж╛рж░ рж╕ржВрж░ржХрзНрж╖рж┐рждред | Developed by <a href="http://rizvejoarder.com/" target="_blank" rel="noopener noreferrer" className="developer-link">Rizve Joarder</a></p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default BengaliOfficeTools;
