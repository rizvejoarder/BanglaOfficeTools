import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { 
  FileText, Download, Upload, Zap, Shield, Users, 
  CheckCircle, ArrowRight, Star, Globe, Clock, Database,
  FileImage, Image, FileX, Mail, Share2, MessageCircle, X,
  Camera, File, FilePlus, FileOutput, FileEdit, PenTool,
  ImageIcon, ScanLine, FileDown, FileUp, Layers, Copy, Link, ExternalLink
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import fileStorage from './utils/fileStorage.js';

const BengaliOfficeTools = () => {
  const [processing, setProcessing] = useState({});
  const [progress, setProgress] = useState({});
  const [progressMessage, setProgressMessage] = useState({});
  const [result, setResult] = useState({});
  const [error, setError] = useState({});
  const [activeModal, setActiveModal] = useState(null); // For popup system
  const [currentTool, setCurrentTool] = useState(null);

  // Tool icon component
  const getToolIcon = (toolId) => {
    const iconProps = { className: "w-8 h-8 text-white" };
    switch(toolId) {
      case 'image-to-word': return <ScanLine {...iconProps} />;
      case 'pdf-to-image': return <ImageIcon {...iconProps} />;
      case 'images-to-pdf': return <Layers {...iconProps} />;
      case 'pdf-to-word': return <FileDown {...iconProps} />;
      case 'word-to-pdf': return <FileUp {...iconProps} />;
      default: return <FileText {...iconProps} />;
    }
  };

  // Main Bengali features from readme.md
  const bengaliTools = [
    {
      id: 'image-to-word',
      title: '‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°',
      subtitle: '‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ - AI-Enhanced OCR',
      description: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü - 99%+ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤‡¶§‡¶æ',
      gradient: 'from-blue-500 to-indigo-600',
      accept: '.jpg,.jpeg,.png,.webp',
      multiple: false,
      features: [
        '99%+ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ OCR',
        '‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â', 
        '‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶á‡¶Æ‡ßá‡¶ú ‡¶è‡¶®‡¶π‡¶æ‡¶®‡ßç‡¶∏‡¶Æ‡ßá‡¶®‡ßç‡¶ü',
        '‡¶¨‡¶ø‡¶ú‡¶Ø‡¶º ‡¶á‡¶â‡¶®‡¶ø‡¶ï‡ßã‡¶° ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
        '‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°'
      ],
      instructions: [
        '‡¶®‡ßÄ‡¶≤ ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üì∑ ‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶°‡ßç‡¶∞‡¶™ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶õ‡¶¨‡¶ø ‡¶ü‡ßá‡¶®‡ßá ‡¶Ü‡¶®‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: JPEG, PNG, JPG, WEBP',
        '‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶™‡ßç‡¶∞‡¶ó‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶ì ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶™‡¶ø ‡¶¨‡¶æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'
      ]
    },
    {
      id: 'pdf-to-image',
      title: 'PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø',
      subtitle: '4K ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
      description: 'PDF ‡¶´‡¶æ‡¶á‡¶≤‡¶ï‡ßá ‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ - 4K ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
      gradient: 'from-green-500 to-emerald-600',
      accept: '.pdf',
      multiple: false,
      features: [
        '4K ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü',
        '‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£',
        '‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ DPI ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏',
        'ZIP ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°',
        '‡¶´‡¶æ‡¶∏‡ßç‡¶ü ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶ø‡¶Ç'
      ],
      instructions: [
        '‡¶∏‡¶¨‡ßÅ‡¶ú ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üìÑ PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        'PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
        'ZIP ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá‡¶§‡ßá ‡¶∏‡¶¨ ‡¶õ‡¶¨‡¶ø ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá'
      ]
    },
    {
      id: 'images-to-pdf',
      title: '‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá PDF',
      subtitle: 'AI ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶Ö‡¶™‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®',
      description: '‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶õ‡¶¨‡¶ø‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø PDF ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ - AI-powered layout',
      gradient: 'from-purple-500 to-pink-600',
      accept: '.jpg,.jpeg,.png,.webp',
      multiple: true,
      features: [
        '‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
        'AI ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü',
        '‡¶ï‡¶Æ‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶Ö‡¶™‡¶∂‡¶®',
        '‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶™‡ßá‡¶ú ‡¶∏‡¶æ‡¶á‡¶ú',
        '‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶°‡ßç‡¶∞‡¶™ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ø‡¶Ç'
      ],
      instructions: [
        '‡¶ó‡ßã‡¶≤‡¶æ‡¶™‡ßÄ ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üñºÔ∏è ‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá PDF" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶õ‡¶¨‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶°‡ßç‡¶∞‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶ï‡ßç‡¶∞‡¶Æ ‡¶∏‡¶æ‡¶ú‡¶æ‡¶® (‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá)',
        '‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
        'PDF ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'
      ]
    },
    {
      id: 'pdf-to-word',
      title: 'PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°',
      subtitle: '‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£',
      description: 'PDF ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶ï‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø Word ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞',
      gradient: 'from-orange-500 to-red-600',
      accept: '.pdf',
      multiple: false,
      features: [
        '‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£',
        '‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶ì ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
        '‡¶´‡¶®‡ßç‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶Ç',
        '‡¶™‡ßá‡¶ú ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ø‡¶Ç',
        '‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶´‡ßÅ‡¶ü‡¶æ‡¶∞'
      ],
      instructions: [
        '‡¶ï‡¶Æ‡¶≤‡¶æ ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üìñ PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        'PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
        'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'
      ]
    },
    {
      id: 'word-to-pdf',
      title: '‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá PDF',
      subtitle: '‡¶™‡ßç‡¶∞‡¶´‡ßá‡¶∂‡¶®‡¶æ‡¶≤ PDF ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶®',
      description: 'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶ï‡ßá ‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ PDF ‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞',
      gradient: 'from-teal-500 to-cyan-600',
      accept: '.doc,.docx',
      multiple: false,
      features: [
        '‡¶™‡ßç‡¶∞‡¶´‡ßá‡¶∂‡¶®‡¶æ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶Ç',
        '‡¶π‡¶æ‡¶á ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®',
        '‡¶è‡¶Æ‡¶¨‡ßá‡¶°‡ßá‡¶° ‡¶´‡¶®‡ßç‡¶ü',
        '‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶®',
        '‡¶ï‡¶Æ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶¨‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï'
      ],
      instructions: [
        '‡¶∏‡¶æ‡¶Ø‡¶º‡¶æ‡¶® ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üìë ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá PDF" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü (.doc/.docx) ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',
        'PDF ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶∂‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶§‡ßà‡¶∞‡¶ø PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'
      ]
    }
  ];

  // Import utility functions dynamically to avoid circular dependencies
  const processFile = useCallback(async (file, toolId) => {
    setProcessing(prev => ({ ...prev, [toolId]: true }));
    setProgress(prev => ({ ...prev, [toolId]: 0 }));
    setError(prev => ({ ...prev, [toolId]: null }));
    
    const updateProgress = (progressValue, message = '') => {
      setProgress(prev => ({ ...prev, [toolId]: progressValue }));
      setProgressMessage(prev => ({ ...prev, [toolId]: message }));
    };

    try {
      let result;
      
      switch (toolId) {
        case 'image-to-word':
          const { convertImageToWord } = await import('./utils/imageToWord');
          result = await convertImageToWord(file, updateProgress, false);
          break;
        case 'pdf-to-image':
          const { convertPdfToImages } = await import('./utils/pdfToImage');
          result = await convertPdfToImages(file, updateProgress);
          break;
        case 'images-to-pdf':
          const { convertImagesToPdf } = await import('./utils/imageToPdf');
          result = await convertImagesToPdf([file], updateProgress);
          break;
        case 'pdf-to-word':
          const { convertPdfToWord } = await import('./utils/pdfToWord');
          result = await convertPdfToWord(file, updateProgress);
          break;
        case 'word-to-pdf':
          const { convertWordToPdf } = await import('./utils/wordToPdf');
          result = await convertWordToPdf(file, updateProgress);
          break;
        default:
          throw new Error('Unsupported tool');
      }
      
      setResult(prev => ({ ...prev, [toolId]: result }));
      toast.success(`${bengaliTools.find(t => t.id === toolId)?.title} ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!`);
    } catch (error) {
      console.error('Processing error:', error);
      setError(prev => ({ ...prev, [toolId]: error.message || '‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá' }));
      toast.error('‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
    } finally {
      setProcessing(prev => ({ ...prev, [toolId]: false }));
    }
  }, [bengaliTools]);

  const handleFileSelect = useCallback((file, toolId) => {
    if (!file) return;
    
    const tool = bengaliTools.find(t => t.id === toolId);
    if (!tool) return;
    
    // Validate file type
    const acceptedTypes = tool.accept.split(',').map(type => type.trim());
    const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
    
    if (!acceptedTypes.includes(fileExtension)) {
      toast.error(`‡¶Ö‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶ø‡¶§ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡•§ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶°: ${tool.accept}`);
      return;
    }
    
    processFile(file, toolId);
  }, [bengaliTools, processFile]);

  const downloadResult = useCallback((result, filename) => {
    if (result?.downloadUrl) {
      const link = document.createElement('a');
      link.href = result.downloadUrl;
      link.download = filename || 'converted-file';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  }, []);

  const shareResult = useCallback(async (result, toolId) => {
    try {
      if (result?.blob) {
        const shareInfo = fileStorage.storeFile(
          result.blob, 
          result.filename || 'shared-file', 
          result.mimeType || 'application/octet-stream'
        );
        
        const shareText = `${bengaliTools.find(t => t.id === toolId)?.title} - ${shareInfo.filename}\n${shareInfo.shareUrl}`;
        
        if (navigator.share) {
          await navigator.share({
            title: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶ü‡ßÅ‡¶≤‡¶∏',
            text: shareText,
            url: shareInfo.shareUrl
          });
        } else {
          await navigator.clipboard.writeText(shareInfo.shareUrl);
          toast.success('‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
        }
      }
    } catch (error) {
      console.error('Share error:', error);
      toast.error('‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
    }
  }, [bengaliTools]);

  const resetTool = useCallback((toolId) => {
    setProcessing(prev => ({ ...prev, [toolId]: false }));
    setProgress(prev => ({ ...prev, [toolId]: 0 }));
    setProgressMessage(prev => ({ ...prev, [toolId]: '' }));
    setResult(prev => ({ ...prev, [toolId]: null }));
    setError(prev => ({ ...prev, [toolId]: null }));
  }, []);

  // Stats data
  const stats = [
    { 
      label: '‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ', 
      value: '‡ß´‡ß¶,‡ß¶‡ß¶‡ß¶+', 
      icon: Users,
      color: 'text-blue-400'
    },
    { 
      label: '‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ú‡¶æ‡¶§', 
      value: '‡ßß‡ß¶ ‡¶≤‡¶ï‡ßç‡¶∑+', 
      icon: FileText,
      color: 'text-green-400'
    },
    { 
      label: '‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶π‡¶æ‡¶∞', 
      value: '‡ßØ‡ßØ.‡ßÆ%', 
      icon: CheckCircle,
      color: 'text-purple-400'
    },
    { 
      label: '‡¶ó‡ßç‡¶∞‡¶æ‡¶π‡¶ï ‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø', 
      value: '‡ß™.‡ßØ/‡ßÖ', 
      icon: Star,
      color: 'text-yellow-400'
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900">
      {/* Enhanced Header with Glassmorphism */}
      <header className="sticky top-0 z-50 backdrop-blur-xl bg-white/10 border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-3">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                <FileText className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-white">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶ü‡ßÅ‡¶≤‡¶∏</h1>
                <p className="text-xs text-blue-200">Professional Document Solutions</p>
              </div>
            </div>
            <nav className="hidden md:flex items-center space-x-6">
              <a href="#tools" className="text-white/80 hover:text-white transition-colors">‡¶ü‡ßÅ‡¶≤‡¶∏</a>
              <a href="#stats" className="text-white/80 hover:text-white transition-colors">‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®</a>
              <a href="#about" className="text-white/80 hover:text-white transition-colors">‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá</a>
            </nav>
          </div>
        </div>
      </header>

      {/* Hero Section - Reduced padding */}
      <section className="py-12 px-4">
        <div className="max-w-7xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <h1 className="text-4xl md:text-5xl font-bold text-white mb-4">
              ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶ü‡ßÅ‡¶≤‡¶∏
            </h1>
            <p className="text-lg md:text-xl text-blue-200 mb-6 max-w-3xl mx-auto">
              ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® - AI-‡¶ö‡¶æ‡¶≤‡¶ø‡¶§ OCR ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ü‡ßÅ‡¶≤‡¶∏
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button 
                onClick={() => document.getElementById('tools').scrollIntoView({ behavior: 'smooth' })}
                className="px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-xl font-semibold hover:shadow-2xl transition-all duration-300 transform hover:scale-105"
              >
                ‡¶ü‡ßÅ‡¶≤‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
              </button>
              <button className="px-6 py-3 bg-white/10 backdrop-blur text-white border border-white/20 rounded-xl font-semibold hover:bg-white/20 transition-all duration-300">
                ‡¶ó‡¶æ‡¶á‡¶° ‡¶™‡¶°‡¶º‡ßÅ‡¶®
              </button>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Stats Section - Enhanced */}
      <section id="stats" className="py-12 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {stats.map((stat, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                className="bg-white/10 backdrop-blur rounded-2xl p-4 text-center border border-white/20 hover:bg-white/20 transition-all duration-300"
              >
                <stat.icon className={`w-6 h-6 ${stat.color} mx-auto mb-2`} />
                <div className="text-xl md:text-2xl font-bold text-white mb-1">{stat.value}</div>
                <div className="text-xs text-blue-200">{stat.label}</div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Tools Section - Improved */}
      <section id="tools" className="py-16 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ü‡ßÅ‡¶≤‡¶∏</h2>
            <p className="text-lg text-blue-200 max-w-2xl mx-auto">
              ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {bengaliTools.map((tool, index) => (
              <motion.div
                key={tool.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                className="bg-white/10 backdrop-blur rounded-2xl p-6 border border-white/20 hover:bg-white/20 transition-all duration-300 group"
              >
                {/* Tool Header */}
                <div className="flex items-center space-x-4 mb-4">
                  <div className={`w-12 h-12 bg-gradient-to-r ${tool.gradient} rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>
                    {getToolIcon(tool.id)}
                  </div>
                  <div className="flex-1">
                    <h3 className="text-lg font-bold text-white">{tool.title}</h3>
                    <p className="text-sm text-blue-400 font-medium">{tool.subtitle}</p>
                  </div>
                </div>

                <p className="text-blue-200 mb-4 text-sm leading-relaxed">{tool.description}</p>
                
                {/* Features List */}
                <ul className="space-y-1 mb-4">
                  {tool.features.slice(0, 3).map((feature, idx) => (
                    <li key={idx} className="text-xs text-blue-200/80 flex items-center">
                      <div className="w-1 h-1 bg-blue-400 rounded-full mr-2 flex-shrink-0"></div>
                      {feature}
                    </li>
                  ))}
                </ul>

                {/* File Input Area */}
                <div className="relative">
                  <input
                    type="file"
                    accept={tool.accept}
                    multiple={tool.multiple}
                    onChange={(e) => e.target.files[0] && handleFileSelect(e.target.files[0], tool.id)}
                    className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  />
                  <div className="border-2 border-dashed border-blue-500/30 rounded-xl p-4 text-center hover:border-blue-400/50 transition-colors cursor-pointer group-hover:border-blue-400/70">
                    <Upload className="w-6 h-6 text-blue-400 mx-auto mb-2" />
                    <p className="text-sm text-blue-200 mb-1">‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                    <p className="text-xs text-blue-400">{tool.accept.replace(/\./g, '').toUpperCase()}</p>
                  </div>
                </div>

                {/* Processing State */}
                {processing[tool.id] && (
                  <div className="mt-4 p-3 bg-blue-500/10 rounded-xl border border-blue-500/20">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm text-blue-200">‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶ö‡¶≤‡¶õ‡ßá...</span>
                      <span className="text-sm text-blue-400">{progress[tool.id]}%</span>
                    </div>
                    <div className="w-full bg-blue-900/50 rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-blue-500 to-indigo-500 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${progress[tool.id]}%` }}
                      ></div>
                    </div>
                    {progressMessage[tool.id] && (
                      <p className="text-xs text-blue-300 mt-2">{progressMessage[tool.id]}</p>
                    )}
                  </div>
                )}

                {/* Result State */}
                {result[tool.id] && (
                  <div className="mt-4 p-3 bg-green-500/10 rounded-xl border border-green-500/20">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm text-green-200 flex items-center">
                        <CheckCircle className="w-4 h-4 mr-2" />
                        ‡¶∏‡¶´‡¶≤!
                      </span>
                      <button
                        onClick={() => resetTool(tool.id)}
                        className="text-green-400 hover:text-green-300"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => downloadResult(result[tool.id], `${tool.id}-result`)}
                        className="flex-1 py-2 px-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-lg text-sm font-semibold hover:shadow-lg transition-all duration-300 flex items-center justify-center"
                      >
                        <Download className="w-4 h-4 mr-1" />
                        ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
                      </button>
                      <button
                        onClick={() => shareResult(result[tool.id], tool.id)}
                        className="flex-1 py-2 px-3 bg-blue-500/20 text-blue-400 border border-blue-500/30 rounded-lg text-sm font-semibold hover:bg-blue-500/30 transition-all duration-300 flex items-center justify-center"
                      >
                        <Share2 className="w-4 h-4 mr-1" />
                        ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞
                      </button>
                    </div>
                  </div>
                )}

                {/* Error State */}
                {error[tool.id] && (
                  <div className="mt-4 p-3 bg-red-500/10 rounded-xl border border-red-500/20">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm text-red-200 flex items-center">
                        <FileX className="w-4 h-4 mr-2" />
                        ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!
                      </span>
                      <button
                        onClick={() => resetTool(tool.id)}
                        className="text-red-400 hover:text-red-300"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                    <p className="text-xs text-red-300">{error[tool.id]}</p>
                  </div>
                )}
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Enhanced Footer */}
      <footer className="bg-slate-900/50 backdrop-blur border-t border-white/10 py-12">
        <div className="max-w-7xl mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
            <div className="md:col-span-2">
              <div className="flex items-center space-x-3 mb-4">
                <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
                  <FileText className="w-5 h-5 text-white" />
                </div>
                <h3 className="text-lg font-bold text-white">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶ü‡ßÅ‡¶≤‡¶∏</h3>
              </div>
              <p className="text-blue-200/80 mb-4">
                ‡¶™‡ßá‡¶∂‡¶æ‡¶¶‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶∏‡ßç‡¶§ ‡¶∏‡¶ô‡ßç‡¶ó‡ßÄ‡•§ 
                AI-‡¶ö‡¶æ‡¶≤‡¶ø‡¶§ OCR ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ü‡ßÅ‡¶≤‡¶∏ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá 
                ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú‡¶ï‡ßá ‡¶∏‡¶π‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
              </p>
              <div className="flex space-x-4">
                <a href="#" className="text-blue-400 hover:text-blue-300 transition-colors">
                  <Mail className="w-5 h-5" />
                </a>
                <a href="#" className="text-blue-400 hover:text-blue-300 transition-colors">
                  <Globe className="w-5 h-5" />
                </a>
                <a href="#" className="text-blue-400 hover:text-blue-300 transition-colors">
                  <Share2 className="w-5 h-5" />
                </a>
              </div>
            </div>
            
            <div>
              <h4 className="text-white font-semibold mb-4">‡¶ü‡ßÅ‡¶≤‡¶∏</h4>
              <ul className="space-y-2">
                {bengaliTools.slice(0, 5).map((tool) => (
                  <li key={tool.id}>
                    <a href={`#${tool.id}`} className="text-blue-200/80 hover:text-white transition-colors text-sm">
                      {tool.title}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <h4 className="text-white font-semibold mb-4">‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø</h4>
              <ul className="space-y-2">
                <li><a href="#" className="text-blue-200/80 hover:text-white transition-colors text-sm">‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ó‡¶æ‡¶á‡¶°</a></li>
                <li><a href="#" className="text-blue-200/80 hover:text-white transition-colors text-sm">‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü</a></li>
                <li><a href="#" className="text-blue-200/80 hover:text-white transition-colors text-sm">FAQ</a></li>
                <li><a href="#" className="text-blue-200/80 hover:text-white transition-colors text-sm">‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó</a></li>
              </ul>
            </div>
          </div>
          
          <div className="border-t border-white/10 pt-8 flex flex-col md:flex-row justify-between items-center">
            <p className="text-blue-200/60 text-sm">
              ¬© ‡ß®‡ß¶‡ß®‡ß™ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶ü‡ßÅ‡¶≤‡¶∏‡•§ ‡¶∏‡¶ï‡¶≤ ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§
            </p>
            <div className="flex items-center space-x-2 mt-4 md:mt-0">
              <span className="text-blue-200/60 text-sm">üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá ‡¶§‡ßà‡¶∞‡¶ø</span>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default BengaliOfficeTools;
