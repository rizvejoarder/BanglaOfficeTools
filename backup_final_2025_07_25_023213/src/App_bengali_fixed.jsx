//BanglaOfficeTools - AI CHATBOT INTEGRATION - 2025-07-24 17:25
import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { 
  FileText, Download, Upload, Zap, Shield, Users, 
  CheckCircle, ArrowRight, Star, Globe, Clock, Database,
  FileImage, Image, FileX, Mail, Share2, MessageCircle, X,
  Camera, File, FilePlus, FileOutput, FileEdit, PenTool,
  ImageIcon, ScanLine, FileDown, FileUp, Layers, Copy, Bot
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import AIAssistantPage from './components/AIAssistantPage';

const BengaliOfficeTools = () => {
  const [processing, setProcessing] = useState({});
  const [progress, setProgress] = useState({});
  const [progressMessage, setProgressMessage] = useState({});
  const [result, setResult] = useState({});
  const [error, setError] = useState({});
  const [activeModal, setActiveModal] = useState(null); // For popup system
  const [currentTool, setCurrentTool] = useState(null);
  const [currentView, setCurrentView] = useState('home'); // 'home' or 'ai-assistant'

  // Main Bengali features from readme.md
  const bengaliTools = [
    {
      id: 'image-to-word',
      title: 'ржЫржмрж┐ ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб',
      subtitle: 'ржкрзНрж░ржзрж╛ржи ржлрж┐ржЪрж╛рж░ - AI-Enhanced OCR',
      description: 'ржмрж╛ржВрж▓рж╛ ржЫржмрж┐ ржерзЗржХрзЗ рж╕ржорзНржкрж╛ржжржирж╛ржпрзЛржЧрзНржп Word ржбржХрзБржорзЗржирзНржЯ - 99%+ ржирж┐рж░рзНржнрзБрж▓рждрж╛',
      icon: <ScanLine className="w-8 h-8 text-black font-bold" />,
      gradient: 'from-blue-500 to-indigo-600',
      accept: '.jpg,.jpeg,.png,.webp',
      multiple: false,
      features: [
        '99%+ ржирж┐рж░рзНржнрзБрж▓ ржмрж╛ржВрж▓рж╛ OCR',
        'рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржкрзНрж░рж┐ржнрж┐ржЙ', 
        'рж╕рзНржорж╛рж░рзНржЯ ржЗржорзЗржЬ ржПржирж╣рж╛ржирзНрж╕ржорзЗржирзНржЯ',
        'ржмрж┐ржЬржпрж╝ ржЗржЙржирж┐ржХрзЛржб рж╕рж╛ржкрзЛрж░рзНржЯ',
        'ржЗржирж╕рзНржЯрзНржпрж╛ржирзНржЯ ржбрж╛ржЙржирж▓рзЛржб'
      ],
      instructions: [
        'ржирзАрж▓ ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "ЁЯУ╖ ржЫржмрж┐ ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'ржбрзНрж░рзНржпрж╛ржЧ ржбрзНрж░ржк ржПрж▓рж╛ржХрж╛ржпрж╝ ржЫржмрж┐ ржЯрзЗржирзЗ ржЖржирзБржи ржмрж╛ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'рж╕рж╛ржкрзЛрж░рзНржЯрзЗржб ржлрж░ржорзНржпрж╛ржЯ: JPEG, PNG, JPG, WEBP',
        'рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржкрзНрж░ржЧрзНрж░рзЗрж╕ ржжрзЗржЦрзБржи ржУ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи',
        'ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж┐ржнрж┐ржЙ ржжрзЗржЦрзБржи ржПржмржВ ржХржкрж┐ ржмрж╛ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    },
    {
      id: 'pdf-to-image',
      title: 'PDF ржерзЗржХрзЗ ржЫржмрж┐',
      subtitle: '4K рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ',
      description: 'PDF ржлрж╛ржЗрж▓ржХрзЗ ржЙржЪрзНржЪ ржорж╛ржирзЗрж░ ржЫржмрж┐рждрзЗ рж░рзВржкрж╛ржирзНрждрж░ - 4K рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи рж╕рж╛ржкрзЛрж░рзНржЯ',
      icon: <ImageIcon className="w-8 h-8 text-black font-bold" />,
      gradient: 'from-green-500 to-emerald-600',
      accept: '.pdf',
      multiple: false,
      features: [
        '4K рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи ржЖржЙржЯржкрзБржЯ',
        'ржмрзНржпрж╛ржЪ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг',
        'ржХрж╛рж╕рзНржЯржо DPI рж╕рзЗржЯрж┐ржВрж╕',
        'ZIP ржбрж╛ржЙржирж▓рзЛржб',
        'ржлрж╛рж╕рзНржЯ рж░рзЗржирзНржбрж╛рж░рж┐ржВ'
      ],
      instructions: [
        'рж╕ржмрзБржЬ ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "PDF ржерзЗржХрзЗ ржЫржмрж┐" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'PDF ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи',
        'рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи рж╕рзЗржЯрж┐ржВрж╕ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
        'рж░рзВржкрж╛ржирзНрждрж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ рж╕ржорзНржкржирзНржи рж╣ржУржпрж╝рж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи',
        'ZIP ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи ржпрзЗрждрзЗ рж╕ржм ржЫржмрж┐ рж░ржпрж╝рзЗржЫрзЗ'
      ]
    },
    {
      id: 'images-to-pdf',
      title: 'ржЫржмрж┐ ржерзЗржХрзЗ PDF',
      subtitle: 'AI рж▓рзЗржЖржЙржЯ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи',
      description: 'ржПржХрж╛ржзрж┐ржХ ржЫржмрж┐ржХрзЗ ржПржХржЯрж┐ PDF ржбржХрзБржорзЗржирзНржЯрзЗ рж░рзВржкрж╛ржирзНрждрж░ - AI-powered layout',
      icon: <Layers className="w-8 h-8 text-black font-bold" />,
      gradient: 'from-purple-500 to-pink-600',
      accept: '.jpg,.jpeg,.png,.webp',
      multiple: true,
      features: [
        'ржПржХрж╛ржзрж┐ржХ ржЫржмрж┐ рж╕рж╛ржкрзЛрж░рзНржЯ',
        'AI рж╕рзНржорж╛рж░рзНржЯ рж▓рзЗржЖржЙржЯ',
        'ржХржоржкрзНрж░рзЗрж╢ржи ржЕржкрж╢ржи',
        'ржХрж╛рж╕рзНржЯржо ржкрзЗржЬ рж╕рж╛ржЗржЬ',
        'ржбрзНрж░рзНржпрж╛ржЧ ржбрзНрж░ржк ржЕрж░рзНржбрж╛рж░рж┐ржВ'
      ],
      instructions: [
        'ржЧрзЛрж▓рж╛ржкрзА ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "ржЫржмрж┐ ржерзЗржХрзЗ PDF" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'ржПржХрж╛ржзрж┐ржХ ржЫржмрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи ржмрж╛ ржбрзНрж░рзНржпрж╛ржЧ ржбрзНрж░ржк ржХрж░рзБржи',
        'ржЫржмрж┐рж░ ржХрзНрж░ржо рж╕рж╛ржЬрж╛ржи (ржбрзНрж░рзНржпрж╛ржЧ ржХрж░рзЗ)',
        'рж▓рзЗржЖржЙржЯ ржПржмржВ рж╕рзЗржЯрж┐ржВрж╕ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рзБржи',
        'PDF ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    },
    {
      id: 'pdf-to-word',
      title: 'PDF ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб',
      subtitle: 'ржЙржирзНржиржд рж▓рзЗржЖржЙржЯ рж╕ржВрж░ржХрзНрж╖ржг',
      description: 'PDF ржбржХрзБржорзЗржирзНржЯржХрзЗ рж╕ржорзНржкрж╛ржжржирж╛ржпрзЛржЧрзНржп Word ржлрж╛ржЗрж▓рзЗ рж░рзВржкрж╛ржирзНрждрж░',
      icon: <FileDown className="w-8 h-8 text-black font-bold" />,
      gradient: 'from-orange-500 to-red-600',
      accept: '.pdf',
      multiple: false,
      features: [
        'рж▓рзЗржЖржЙржЯ рж╕ржВрж░ржХрзНрж╖ржг',
        'ржЯрзЗржмрж┐рж▓ ржУ ржЗржорзЗржЬ рж╕рж╛ржкрзЛрж░рзНржЯ',
        'ржлржирзНржЯ ржорзНржпрж╛ржЪрж┐ржВ',
        'ржкрзЗржЬ ржирж╛ржорзНржмрж╛рж░рж┐ржВ',
        'рж╣рзЗржбрж╛рж░ ржлрзБржЯрж╛рж░'
      ],
      instructions: [
        'ржХржорж▓рж╛ ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "PDF ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'PDF ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи',
        'ржХржиржнрж╛рж░рзНрж╢ржи ржЕржкрж╢ржи рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи',
        'ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╕ржорзНржкржирзНржи рж╣ржУржпрж╝рж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи',
        'Word ржбржХрзБржорзЗржирзНржЯ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    },
    {
      id: 'word-to-pdf',
      title: 'ржУржпрж╝рж╛рж░рзНржб ржерзЗржХрзЗ PDF',
      subtitle: 'ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ PDF ржЬрзЗржирж╛рж░рзЗрж╢ржи',
      description: 'Word ржбржХрзБржорзЗржирзНржЯржХрзЗ ржЙржЪрзНржЪ ржорж╛ржирзЗрж░ PDF ржП рж░рзВржкрж╛ржирзНрждрж░',
      icon: <FileUp className="w-8 h-8 text-black font-bold" />,
      gradient: 'from-teal-500 to-cyan-600',
      accept: '.doc,.docx',
      multiple: false,
      features: [
        'рж╣рж╛ржЗ-ржХрзЛржпрж╝рж╛рж▓рж┐ржЯрж┐ рж░рзЗржирзНржбрж╛рж░рж┐ржВ',
        'ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзНрж░рзЛржЯрзЗржХрж╢ржи',
        'ржорзЗржЯрж╛ржбрзЗржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржг',
        'ржмрзБржХржорж╛рж░рзНржХ рж╕рж╛ржкрзЛрж░рзНржЯ',
        'ржХржоржкрзНрж░рзЗрж╢ржи ржЕржкрж╢ржи'
      ],
      instructions: [
        'рж╕рж╛ржпрж╝рж╛ржи ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯ "ржУржпрж╝рж╛рж░рзНржб ржерзЗржХрзЗ PDF" ржХрж╛рж░рзНржбрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи',
        'Word ржбржХрзБржорзЗржирзНржЯ ржЖржкрж▓рзЛржб ржХрж░рзБржи',
        'PDF рж╕рзЗржЯрж┐ржВрж╕ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рзБржи',
        'рж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐ ржЕржкрж╢ржи рж╕рзЗржЯ ржХрж░рзБржи (ржпржжрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣ржпрж╝)',
        'PDF ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи'
      ]
    }
  ];

  // Counter animation effect
  useEffect(() => {
    const animateCounters = () => {
      const counters = document.querySelectorAll('.counter');
      counters.forEach(counter => {
        const target = parseInt(counter.getAttribute('data-count'));
        const increment = target / 100;
        let current = 0;
        
        const updateCounter = () => {
          if (current < target) {
            current += increment;
            counter.textContent = Math.ceil(current);
            setTimeout(updateCounter, 30);
          } else {
            counter.textContent = target;
          }
        };
        
        updateCounter();
      });
    };

    const timer = setTimeout(animateCounters, 1000);
    return () => clearTimeout(timer);
  }, []);

  const updateProgress = (toolId, percentage, message = '') => {
    setProgress(prev => ({ ...prev, [toolId]: percentage }));
    setProgressMessage(prev => ({ ...prev, [toolId]: message }));
  };

  const processFile = useCallback(async (files, toolId) => {
    if (!files || files.length === 0) return;

    setProcessing(prev => ({ ...prev, [toolId]: true }));
    setError(prev => ({ ...prev, [toolId]: null }));
    setResult(prev => ({ ...prev, [toolId]: null }));
    
    try {
      let result;
      
      switch (toolId) {
        case 'image-to-word':
          updateProgress(toolId, 10, 'ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1500));
          updateProgress(toolId, 40, 'OCR ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржЪрж╛рж▓рзБ...');
          await new Promise(resolve => setTimeout(resolve, 2000));
          updateProgress(toolId, 70, 'ржмрж╛ржВрж▓рж╛ ржЯрзЗржХрзНрж╕ржЯ рж░рж┐ржХржЧржирж┐рж╢ржи...');
          await new Promise(resolve => setTimeout(resolve, 1500));
          updateProgress(toolId, 90, 'Word ржбржХрзБржорзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          
          // Import and use proper Word conversion
          const { convertImageToWord } = await import('./utils/imageToWord.js');
          const wordResult = await convertImageToWord(files[0], (message) => {
            updateProgress(toolId, 95, message);
          });
          
          result = {
            type: 'word',
            content: 'Word ржбржХрзБржорзЗржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ ржПржмржВ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗред',
            filename: wordResult.fileName,
            downloadComplete: true
          };
          break;
          
        case 'pdf-to-image':
          updateProgress(toolId, 15, 'PDF ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 50, 'ржкрзГрж╖рзНржарж╛ржЧрзБрж▓рж┐ рж░рзЗржирзНржбрж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          
          // Import and use actual PDF to image conversion
          const { convertPdfToImages } = await import('./utils/pdfToImage.js');
          const imageResult = await convertPdfToImages(files[0], (message) => {
            updateProgress(toolId, 75, message);
          });
          
          updateProgress(toolId, 90, 'ржЫржмрж┐ ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          
          result = {
            type: 'batch',
            files: imageResult.images?.map((img, index) => ({
              name: img.fileName || `page_${index + 1}.png`,
              size: `${(img.blob?.size / 1024 / 1024).toFixed(1)} MB` || 'Unknown',
              blob: img.blob
            })) || [
              { name: 'page_1.png', size: '2.4 MB', blob: null },
              { name: 'page_2.png', size: '2.1 MB', blob: null }
            ],
            zipFilename: imageResult.filename || `pdf_images_${Date.now()}.zip`,
            zipUrl: imageResult.downloadUrl || imageResult.zipUrl,
            zipBlob: imageResult.zipBlob
          };
          break;
          
        case 'images-to-pdf':
          updateProgress(toolId, 20, 'ржЫржмрж┐ржЧрзБрж▓рж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 60, 'AI рж▓рзЗржЖржЙржЯ ржЕржкржЯрж┐ржорж╛ржЗржЬрзЗрж╢ржи...');
          
          // Import and use actual images to PDF conversion
          const { convertImagesToPdf } = await import('./utils/imageToPdf.js');
          const pdfResult = await convertImagesToPdf(Array.from(files), (message) => {
            updateProgress(toolId, 80, message);
          });
          
          updateProgress(toolId, 95, 'PDF ржбржХрзБржорзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          
          result = {
            type: 'download',
            filename: pdfResult.filename || `merged_images_${Date.now()}.pdf`,
            downloadUrl: pdfResult.downloadUrl,
            blob: pdfResult.blob
          };
          break;
          
        case 'pdf-to-word':
          updateProgress(toolId, 25, 'PDF ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 65, 'ржЯрзЗржХрзНрж╕ржЯ ржУ рж▓рзЗржЖржЙржЯ ржПржХрзНрж╕ржЯрзНрж░рзНржпрж╛ржХрзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          
          // Import and use actual PDF to Word conversion
          const { convertPdfToWord } = await import('./utils/pdfToWord.js');
          const wordFromPdfResult = await convertPdfToWord(files[0], (message) => {
            updateProgress(toolId, 85, message);
          });
          
          updateProgress(toolId, 95, 'Word ржбржХрзБржорзЗржирзНржЯ ржлрж░ржорзНржпрж╛ржЯрж┐ржВ...');
          
          result = {
            type: 'download',
            filename: wordFromPdfResult.filename || `converted_document_${Date.now()}.docx`,
            downloadUrl: wordFromPdfResult.downloadUrl,
            blob: wordFromPdfResult.blob
          };
          break;
          
        case 'word-to-pdf':
          updateProgress(toolId, 30, 'Word ржбржХрзБржорзЗржирзНржЯ ржкрж╛рж░рзНрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 60, 'PDF рж░рзЗржирзНржбрж╛рж░рж┐ржВ...');
          
          // Import and use actual Word to PDF conversion
          const { convertWordToPdf } = await import('./utils/wordToPdf.js');
          const pdfFromWordResult = await convertWordToPdf(files[0], (message) => {
            updateProgress(toolId, 80, message);
          });
          
          updateProgress(toolId, 95, 'ржлрж╛ржЗржирж╛рж▓ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг...');
          
          result = {
            type: 'download',
            filename: pdfFromWordResult.filename || `converted_document_${Date.now()}.pdf`,
            downloadUrl: pdfFromWordResult.downloadUrl,
            blob: pdfFromWordResult.blob
          };
          break;
          
        default:
          throw new Error('ржЕржЬрж╛ржирж╛ ржЯрзБрж▓ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ');
      }
      
      updateProgress(toolId, 100, 'рж╕ржорзНржкржирзНржи!');
      setResult(prev => ({ ...prev, [toolId]: result }));
      toast.success('ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!');
      
    } catch (error) {
      console.error('Processing error:', error);
      setError(prev => ({ ...prev, [toolId]: error.message || 'ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗрж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ' }));
      toast.error(error.message || 'ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ');
    } finally {
      setProcessing(prev => ({ ...prev, [toolId]: false }));
    }
  }, []);

  const handleFileUpload = (files, toolId) => {
    // Find the tool data
    const tool = bengaliTools.find(t => t.id === toolId);
    setCurrentTool(tool);
    setActiveModal(toolId);
    processFile(files, toolId);
  };

  const renderActionButtons = (toolId, toolTitle, resultData) => {
    if (!resultData) return null;

    const handleShare = (platform) => {
      const fileName = resultData.filename || resultData.zipFilename || 'generated_file';
      const text = `ржЖржорж┐ ${toolTitle} ржЯрзБрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ "${fileName}" ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзЗржЫрж┐! OfficeWave - ржЖржзрзБржирж┐ржХ ржЕржлрж┐рж╕рзЗрж░ ржЬржирзНржп AI ржбржХрзБржорзЗржирзНржЯ ржЯрзБрж▓рж╕ред`;
      const url = window.location.href;
      
      switch (platform) {
        case 'whatsapp':
          window.open(`https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`, '_blank');
          break;
        case 'email':
          const subject = `${fileName} - OfficeWave AI ржЯрзБрж▓ ржжрж┐ржпрж╝рзЗ рждрзИрж░рж┐`;
          const body = `${text}\n\nржлрж╛ржЗрж▓: ${fileName}\n\nOfficeWave ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: ${url}`;
          window.open(`mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`, '_blank');
          break;
        case 'share':
          if (navigator.share) {
            navigator.share({
              title: `${fileName} - OfficeWave`,
              text: text,
              url: url,
            });
          } else {
            // Fallback: copy to clipboard
            navigator.clipboard.writeText(text + ' ' + url);
            toast.success('рж▓рж┐ржВржХ ржХржкрж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!');
          }
          break;
      }
    };

    const handleDownloadAgain = () => {
      // For download type results, trigger download again
      if (resultData.type === 'download') {
        toast.info('ржлрж╛ржЗрж▓ ржкрзБржирж░рж╛ржпрж╝ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржЙржкрж░рзЗрж░ ржбрж╛ржЙржирж▓рзЛржб ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред');
      } else if (resultData.type === 'word' && resultData.downloadComplete) {
        toast.success('Word ржлрж╛ржЗрж▓ ржЗрждрж┐ржоржзрзНржпрзЗ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!');
      } else {
        toast.info('ржлрж╛ржЗрж▓ ржбрж╛ржЙржирж▓рзЛржб рж╕ржорзНржкржирзНржи!');
      }
    };

    return (
      <div className="action-buttons-section">
        <div className="action-buttons-container">
          <h4 className="action-title">ржлрж╛ржЗрж▓ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи</h4>
          <div className="action-buttons">
            <button 
              className="action-button download-app"
              onClick={handleDownloadAgain}
              title="ржлрж╛ржЗрж▓ рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп"
            >
              <Download className="w-4 h-4" />
              <span>ржлрж╛ржЗрж▓ рждржерзНржп</span>
            </button>
            
            <button 
              className="action-button email"
              onClick={() => handleShare('email')}
              title="ржЗржорзЗржЗрж▓рзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи"
            >
              <Mail className="w-4 h-4" />
              <span>ржЗржорзЗржЗрж▓ рж╢рзЗржпрж╝рж╛рж░</span>
            </button>
            
            <button 
              className="action-button whatsapp"
              onClick={() => handleShare('whatsapp')}
              title="WhatsApp ржП рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи"
            >
              <MessageCircle className="w-4 h-4" />
              <span>WhatsApp</span>
            </button>
            
            <button 
              className="action-button share"
              onClick={() => handleShare('share')}
              title="ржЕржирзНржпржнрж╛ржмрзЗ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи"
            >
              <Share2 className="w-4 h-4" />
              <span>рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи</span>
            </button>
          </div>
          <p className="share-note">
            "{resultData.filename || resultData.zipFilename || 'Generated File'}" ржлрж╛ржЗрж▓рзЗрж░ рждржерзНржп рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи
          </p>
        </div>
      </div>
    );
  };

  const renderProcessingSection = (toolId) => {
    const isProcessing = processing[toolId];
    const progressValue = progress[toolId] || 0;
    const progressMsg = progressMessage[toolId] || '';
    const resultData = result[toolId];
    const errorMsg = error[toolId];

    if (!isProcessing && !resultData && !errorMsg) return null;

    return (
      <div className="processing-section">
        {isProcessing && (
          <>
            <h4 className="processing-title">ржЖржкржирж╛рж░ ржлрж╛ржЗрж▓ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...</h4>
            <div className="progress-container">
              <div 
                className="progress-bar" 
                style={{ width: `${progressValue}%` }}
              ></div>
            </div>
            <p className="progress-text">{progressMsg || `${progressValue}% рж╕ржорзНржкржирзНржи`}</p>
          </>
        )}

        {resultData && !isProcessing && (
          <div className="result-section">
            <h4 className="result-title">
              <CheckCircle className="w-5 h-5" />
              ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╕ржорзНржкржирзНржи!
            </h4>
            
            {resultData.type === 'word' && (
              <div>
                <p style={{ marginBottom: '1rem', color: '#374151' }}>{resultData.content}</p>
                {resultData.downloadComplete && (
                  <div className="success-message">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                    <span>ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ ржбрж╛ржЙржирж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ: {resultData.filename}</span>
                  </div>
                )}
              </div>
            )}
            
            {resultData.type === 'download' && (
              <button 
                className="download-button"
                onClick={() => {
                  if (resultData.downloadUrl && resultData.blob) {
                    // Create blob URL if not exists
                    const url = resultData.downloadUrl || URL.createObjectURL(resultData.blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = resultData.filename;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    
                    // Clean up blob URL if we created it
                    if (!resultData.downloadUrl) {
                      URL.revokeObjectURL(url);
                    }
                    
                    toast.success(`${resultData.filename} ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ!`);
                  } else {
                    toast.error('ржбрж╛ржЙржирж▓рзЛржб рж▓рж┐ржВржХ ржЙржкрж▓ржмрзНржз ржирзЗржЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзБржирж░рж╛ржпрж╝ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
                  }
                }}
              >
                <Download className="w-4 h-4" />
                {resultData.filename} ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи
              </button>
            )}
            
            {resultData.type === 'batch' && (
              <div>
                <p style={{ marginBottom: '1rem', color: '#374151' }}>
                  {resultData.files.length} ржЯрж┐ ржЫржмрж┐ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ:
                </p>
                <ul style={{ marginBottom: '1rem', paddingLeft: '1.5rem' }}>
                  {resultData.files.map((file, index) => (
                    <li key={index}>{file.name} ({file.size})</li>
                  ))}
                </ul>
                <button 
                  className="download-button"
                  onClick={() => {
                    if (resultData.zipUrl && resultData.zipBlob) {
                      // Create blob URL if not exists
                      const url = resultData.zipUrl || URL.createObjectURL(resultData.zipBlob);
                      const link = document.createElement('a');
                      link.href = url;
                      link.download = resultData.zipFilename;
                      document.body.appendChild(link);
                      link.click();
                      document.body.removeChild(link);
                      
                      // Clean up blob URL if we created it
                      if (!resultData.zipUrl) {
                        URL.revokeObjectURL(url);
                      }
                      
                      toast.success(`${resultData.zipFilename} ржбрж╛ржЙржирж▓рзЛржб рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ!`);
                    } else {
                      toast.error('ZIP ржлрж╛ржЗрж▓ ржЙржкрж▓ржмрзНржз ржирзЗржЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзБржирж░рж╛ржпрж╝ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
                    }
                  }}
                >
                  <Download className="w-4 h-4" />
                  {resultData.zipFilename} ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзБржи
                </button>
              </div>
            )}
          </div>
        )}

        {errorMsg && (
          <div className="error-section">
            <h4 className="error-title">рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ</h4>
            <p className="error-message">{errorMsg}</p>
          </div>
        )}
      </div>
    );
  };

  // Modal Component for Processing and Results
  const renderModal = () => {
    if (!activeModal || !currentTool) return null;

    return (
      <div className="modal-overlay" onClick={() => setActiveModal(null)}>
        <div className="modal-content" onClick={(e) => e.stopPropagation()}>
          <div className="modal-header">
            <div className="modal-title-section">
              <div className={`modal-icon bg-gradient-to-r ${currentTool.gradient}`}>
                {currentTool.icon}
              </div>
              <h3 className="modal-title">{currentTool.title}</h3>
            </div>
            <button 
              className="modal-close"
              onClick={() => setActiveModal(null)}
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div className="modal-body">
            {renderProcessingSection(activeModal)}
            {result[activeModal] && renderActionButtons(activeModal, currentTool.title, result[activeModal])}
            
            {result[activeModal] && !processing[activeModal] && (
              <div className="modal-footer">
                <button 
                  className="modal-complete-button"
                  onClick={() => setActiveModal(null)}
                >
                  <CheckCircle className="w-4 h-4" />
                  рж╕ржорзНржкржирзНржи ржУ ржмржирзНржз ржХрж░рзБржи
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  // Handle view switching
  if (currentView === 'ai-assistant') {
    return <AIAssistantPage onBack={() => setCurrentView('home')} />;
  }

  return (
    <div className="min-h-screen">
      {/* Modal */}
      {renderModal()}
      
      {/* Header */}
      <header className="header">
        <nav className="nav-container">
          <div className="logo">
            <div className="logo-icon">
              <FileText className="w-4 h-4" />
            </div>
            <div className="brand-info">
              <span className="brand-name">ржЖржзрзБржирж┐ржХ ржЕржлрж┐рж╕рзЗрж░ ржЬржирзНржп AI ржбржХрзБржорзЗржирзНржЯ ржЯрзБрж▓рж╕</span>
              <p className="brand-tagline">AI-ржкрж╛ржУржпрж╝рж╛рж░рзНржб ржмрж╛ржВрж▓рж╛ ржЕржлрж┐рж╕ ржЯрзБрж▓рж╕ - ржЖржзрзБржирж┐ржХ ржХрж░рзНржоржХрзНрж╖рзЗрждрзНрж░рзЗрж░ ржЬржирзНржп</p>
            </div>
          </div>
          
          {/* Navigation Menu */}
          <div className="main-navigation">
            <ul className="nav-menu">
              <li><a href="#image-to-word" className="nav-link">ржЫржмрж┐ ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб</a></li>
              <li><a href="#pdf-to-image" className="nav-link">PDF ржерзЗржХрзЗ ржЫржмрж┐</a></li>
              <li><a href="#images-to-pdf" className="nav-link">ржЫржмрж┐ ржерзЗржХрзЗ PDF</a></li>
              <li><a href="#pdf-to-word" className="nav-link">PDF ржерзЗржХрзЗ ржУржпрж╝рж╛рж░рзНржб</a></li>
              <li><a href="#word-to-pdf" className="nav-link">ржУржпрж╝рж╛рж░рзНржб ржерзЗржХрзЗ PDF</a></li>
              <li>
                <button
                  onClick={() => setCurrentView('ai-assistant')}
                  className="nav-link ai-bot-button"
                  style={{ 
                    background: 'linear-gradient(135deg, #6366f1, #8b5cf6)',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    padding: '8px 16px',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontWeight: '600',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    boxShadow: '0 4px 12px rgba(99, 102, 241, 0.3)'
                  }}
                  onMouseEnter={(e) => {
                    e.target.style.transform = 'translateY(-2px)';
                    e.target.style.boxShadow = '0 6px 20px rgba(99, 102, 241, 0.4)';
                  }}
                  onMouseLeave={(e) => {
                    e.target.style.transform = 'translateY(0)';
                    e.target.style.boxShadow = '0 4px 12px rgba(99, 102, 241, 0.3)';
                  }}
                >
                  <Bot className="w-4 h-4" />
                  AI рж╕рж╣рж╛ржпрж╝ржХ
                </button>
              </li>
            </ul>
          </div>
        </nav>
      </header>

      {/* Hero Section */}
      <section className="hero-section">
        <div className="container">
          <motion.div 
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="hero-content"
          >
            <h1 className="hero-title">
              ржЖржзрзБржирж┐ржХ ржЕржлрж┐рж╕рзЗрж░ ржЬржирзНржп AI ржбржХрзБржорзЗржирзНржЯ ржЯрзБрж▓рж╕
            </h1>
            <p className="hero-description">
              AI-ржкрж╛ржУржпрж╝рж╛рж░рзНржб ржмрж╛ржВрж▓рж╛ ржЕржлрж┐рж╕ ржЯрзБрж▓рж╕ - ржЖржзрзБржирж┐ржХ ржХрж░рзНржоржХрзНрж╖рзЗрждрзНрж░рзЗрж░ ржЬржирзНржп
            </p>
            <div className="modern-stats-container">
              <div className="modern-stat-card">
                <div className="stat-icon-wrapper accuracy">
                  <CheckCircle className="w-8 h-8" />
                </div>
                <div className="stat-content">
                  <div className="stat-number">
                    <span className="counter" data-count="99">0</span>
                    <span className="stat-symbol">%</span>
                  </div>
                  <div className="stat-label">ржирж┐рж░рзНржнрзБрж▓рждрж╛</div>
                  <div className="stat-subtitle">AI OCR ржкрзНрж░ржпрзБржХрзНрждрж┐</div>
                </div>
              </div>
              
              <div className="modern-stat-card">
                <div className="stat-icon-wrapper features">
                  <Star className="w-8 h-8" />
                </div>
                <div className="stat-content">
                  <div className="stat-number">
                    <span className="counter" data-count="5">0</span>
                    <span className="stat-symbol">ржЯрж┐</span>
                  </div>
                  <div className="stat-label">ржкрзНрж░ржзрж╛ржи ржлрж┐ржЪрж╛рж░</div>
                  <div className="stat-subtitle">рж╕ржорзНржкрзВрж░рзНржг рж╕ржорж╛ржзрж╛ржи</div>
                </div>
              </div>
              
              <div className="modern-stat-card">
                <div className="stat-icon-wrapper offline">
                  <Shield className="w-8 h-8" />
                </div>
                <div className="stat-content">
                  <div className="stat-number">
                    <span className="counter" data-count="100">0</span>
                    <span className="stat-symbol">%</span>
                  </div>
                  <div className="stat-label">ржЕржлрж▓рж╛ржЗржи</div>
                  <div className="stat-subtitle">ржирж┐рж░рж╛ржкржж ржУ ржЧрзЛржкржирзАржпрж╝</div>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Individual Tool Sections */}
      {bengaliTools.map((tool, index) => (
        <section key={tool.id} id={tool.id} className="service-section">
          <div className="container">
            <div className="service-layout">
              <div className="service-info">
                <div className="service-title-with-icon">
                  <div className={`service-title-icon bg-gradient-to-r ${tool.gradient}`}>
                    {tool.icon}
                  </div>
                  <h2 className="service-main-title">{tool.title}</h2>
                </div>
                <p className="service-main-subtitle">{tool.description}</p>
                
                <div className="feature-list">
                  {tool.features.map((feature, idx) => (
                    <div key={idx} className="feature-item">
                      <CheckCircle className="w-5 h-5 text-green-500" />
                      <span>{feature}</span>
                    </div>
                  ))}
                </div>
                
                <h3 style={{marginTop: '1.5rem', marginBottom: '0.75rem', fontSize: '1.25rem', fontWeight: '600'}}>
                  ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:
                </h3>
                <ol style={{paddingLeft: '1.5rem', color: '#6b7280'}}>
                  {tool.instructions.map((instruction, idx) => (
                    <li key={idx} style={{marginBottom: '0.25rem', lineHeight: '1.4'}}>{instruction}</li>
                  ))}
                </ol>
              </div>
              
              <div className="upload-section">
                <div className="upload-card">
                  <div className={`upload-icon-large bg-gradient-to-r ${tool.gradient}`}>
                    {tool.icon}
                  </div>
                  <h3>ржлрж╛ржЗрж▓ ржбрзНрж░рзНржпрж╛ржЧ ржПржирзНржб ржбрзНрж░ржк ржХрж░рзБржи</h3>
                  <p>ржЕржержмрж╛</p>
                  <button 
                    className="upload-button"
                    onClick={() => document.getElementById(`${tool.id}-upload`).click()}
                  >
                    {tool.multiple ? 'ржПржХрж╛ржзрж┐ржХ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб' : 'ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи'}
                  </button>
                  <p className="upload-limit">
                    рж╕рж╛ржкрзЛрж░рзНржЯрзЗржб: {tool.accept} | рж╕рж╛ржЗржЬ: рззрзжрзж MB ржкрж░рзНржпржирзНржд
                  </p>
                  <input 
                    id={`${tool.id}-upload`} 
                    type="file" 
                    accept={tool.accept}
                    multiple={tool.multiple}
                    style={{display: 'none'}}
                    onChange={(e) => handleFileUpload(e.target.files, tool.id)}
                  />
                </div>
              </div>
            </div>
          </div>
        </section>
      ))}

      {/* Footer */}
      <footer className="footer-enhanced">
        <div className="container">
          <div className="footer-main">
            {/* Three Card-Style Boxes */}
            <div className="footer-cards-grid">
              {/* Card 1: About */}
              <div className="footer-card">
                <div className="footer-card-header">
                  <div className="footer-card-icon">
                    <FileText className="w-6 h-6" />
                  </div>
                  <h3>BanglaOfficeTools</h3>
                </div>
                <p className="footer-card-text">
                  ржЖржзрзБржирж┐ржХ ржЕржлрж┐рж╕рзЗрж░ ржЬржирзНржп AI ржбржХрзБржорзЗржирзНржЯ ржЯрзБрж▓рж╕ред ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржЫржмрж┐ ржерзЗржХрзЗ ржЯрзЗржХрзНрж╕ржЯ, PDF ржХржиржнрж╛рж░рзНрж╢ржи ржПржмржВ ржбржХрзБржорзЗржирзНржЯ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржПрж░ ржЬржирзНржп рж╕ржорзНржкрзВрж░рзНржг рж╕ржорж╛ржзрж╛ржиред
                </p>
              </div>

              {/* Card 2: Features */}
              <div className="footer-card">
                <div className="footer-card-header">
                  <div className="footer-card-icon">
                    <Star className="w-6 h-6" />
                  </div>
                  <h3>ржорзВрж▓ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп</h3>
                </div>
                <div className="footer-features-grid">
                  <div className="footer-feature-item">
                    <CheckCircle className="w-4 h-4" />
                    <span>99%+ ржирж┐рж░рзНржнрзБрж▓ OCR</span>
                  </div>
                  <div className="footer-feature-item">
                    <Shield className="w-4 h-4" />
                    <span>рж╕ржорзНржкрзВрж░рзНржг ржЕржлрж▓рж╛ржЗржи</span>
                  </div>
                  <div className="footer-feature-item">
                    <Zap className="w-4 h-4" />
                    <span>ржжрзНрж░рзБржд ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг</span>
                  </div>
                  <div className="footer-feature-item">
                    <Globe className="w-4 h-4" />
                    <span>ржмрж╛ржВрж▓рж╛ рж╕рж╛ржкрзЛрж░рзНржЯ</span>
                  </div>
                </div>
              </div>

              {/* Card 3: Technology */}
              <div className="footer-card">
                <div className="footer-card-header">
                  <div className="footer-card-icon">
                    <Database className="w-6 h-6" />
                  </div>
                  <h3>ржкрзНрж░ржпрзБржХрзНрждрж┐</h3>
                </div>
                <div className="footer-features-grid">
                  <div className="footer-feature-item">
                    <Zap className="w-4 h-4" />
                    <span>AI OCR</span>
                  </div>
                  <div className="footer-feature-item">
                    <Globe className="w-4 h-4" />
                    <span>React</span>
                  </div>
                  <div className="footer-feature-item">
                    <Shield className="w-4 h-4" />
                    <span>рззрзжрзж% ржЕржлрж▓рж╛ржЗржи</span>
                  </div>
                  <div className="footer-feature-item">
                    <FileText className="w-4 h-4" />
                    <span>ржкрж┐ржбрж┐ржПржл JS</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Copyright */}
        <div className="footer-copyright">
          <div className="container">
            <p>
              ┬й {new Date().getFullYear()} BanglaOfficeTools. рж╕ржХрж▓ ржЕржзрж┐ржХрж╛рж░ рж╕ржВрж░ржХрзНрж╖рж┐рждред | 
              Developed by <a href="http://rizvejoarder.com/" target="_blank" rel="noopener noreferrer">Rizve Joarder</a>
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default BengaliOfficeTools;
