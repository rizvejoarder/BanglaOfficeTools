import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { 
  FileText, Download, Upload, Zap, Shield, Users, 
  CheckCircle, ArrowRight, Star, Globe, Clock, Database,
  FileImage, Image, FileX, Mail, Share2, MessageCircle, X,
  Camera, File, FilePlus, FileOutput, FileEdit, PenTool,
  ImageIcon, ScanLine, FileDown, FileUp, Layers, Copy, Link, ExternalLink
} from 'lucide-react';
import { toast } from 'react-hot-toast';
import fileStorage from './utils/fileStorage.js';

const BengaliOfficeTools = () => {
  const [processing, setProcessing] = useState({});
  const [progress, setProgress] = useState({});
  const [progressMessage, setProgressMessage] = useState({});
  const [result, setResult] = useState({});
  const [error, setError] = useState({});
  const [activeModal, setActiveModal] = useState(null);
  const [currentTool, setCurrentTool] = useState(null);

  // Main Bengali features - ALL YOUR ORIGINAL TOOLS
  const bengaliTools = [
    {
      id: 'image-to-word',
      title: '‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°',
      subtitle: '‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ - AI-Enhanced OCR',
      description: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü - 99%+ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤‡¶§‡¶æ',
      icon: React.createElement(ScanLine, { className: "w-8 h-8 text-white" }),
      gradient: 'from-blue-500 to-indigo-600',
      accept: '.jpg,.jpeg,.png,.webp',
      multiple: false,
      features: [
        '99%+ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ OCR',
        '‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â', 
        '‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶á‡¶Æ‡ßá‡¶ú ‡¶è‡¶®‡¶π‡¶æ‡¶®‡ßç‡¶∏‡¶Æ‡ßá‡¶®‡ßç‡¶ü',
        '‡¶¨‡¶ø‡¶ú‡¶Ø‡¶º ‡¶á‡¶â‡¶®‡¶ø‡¶ï‡ßã‡¶° ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
        '‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°'
      ],
      instructions: [
        '‡¶®‡ßÄ‡¶≤ ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üì∑ ‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶°‡ßç‡¶∞‡¶™ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶õ‡¶¨‡¶ø ‡¶ü‡ßá‡¶®‡ßá ‡¶Ü‡¶®‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: JPEG, PNG, JPG, WEBP',
        '‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶™‡ßç‡¶∞‡¶ó‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶ì ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡ßç‡¶∞‡¶ø‡¶≠‡¶ø‡¶â ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶™‡¶ø ‡¶¨‡¶æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'
      ]
    },
    {
      id: 'pdf-to-image',
      title: 'PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø',
      subtitle: '4K ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
      description: 'PDF ‡¶´‡¶æ‡¶á‡¶≤‡¶ï‡ßá ‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ - 4K ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
      icon: React.createElement(ImageIcon, { className: "w-8 h-8 text-white" }),
      gradient: 'from-green-500 to-emerald-600',
      accept: '.pdf',
      multiple: false,
      features: [
        '4K ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü',
        '‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£',
        '‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ DPI ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏',
        'ZIP ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°',
        '‡¶´‡¶æ‡¶∏‡ßç‡¶ü ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶ø‡¶Ç'
      ],
      instructions: [
        '‡¶∏‡¶¨‡ßÅ‡¶ú ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üìÑ PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        'PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
        'ZIP ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá‡¶§‡ßá ‡¶∏‡¶¨ ‡¶õ‡¶¨‡¶ø ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá'
      ]
    },
    {
      id: 'images-to-pdf',
      title: '‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá PDF',
      subtitle: 'AI ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶Ö‡¶™‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®',
      description: '‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶õ‡¶¨‡¶ø‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø PDF ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ - AI-powered layout',
      icon: React.createElement(Layers, { className: "w-8 h-8 text-white" }),
      gradient: 'from-purple-500 to-pink-600',
      accept: '.jpg,.jpeg,.png,.webp',
      multiple: true,
      features: [
        '‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
        'AI ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü',
        '‡¶ï‡¶Æ‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶Ö‡¶™‡¶∂‡¶®',
        '‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶™‡ßá‡¶ú ‡¶∏‡¶æ‡¶á‡¶ú',
        '‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶°‡ßç‡¶∞‡¶™ ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞‡¶ø‡¶Ç'
      ],
      instructions: [
        '‡¶ó‡ßã‡¶≤‡¶æ‡¶™‡ßÄ ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üñºÔ∏è ‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá PDF" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶õ‡¶¨‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶°‡ßç‡¶∞‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶ï‡ßç‡¶∞‡¶Æ ‡¶∏‡¶æ‡¶ú‡¶æ‡¶® (‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá)',
        '‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
        'PDF ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'
      ]
    },
    {
      id: 'pdf-to-word',
      title: 'PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°',
      subtitle: '‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£',
      description: 'PDF ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶ï‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø Word ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞',
      icon: React.createElement(FileDown, { className: "w-8 h-8 text-white" }),
      gradient: 'from-orange-500 to-red-600',
      accept: '.pdf',
      multiple: false,
      features: [
        '‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£',
        '‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶ì ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
        '‡¶´‡¶®‡ßç‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶Ç',
        '‡¶™‡ßá‡¶ú ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ø‡¶Ç',
        '‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶´‡ßÅ‡¶ü‡¶æ‡¶∞'
      ],
      instructions: [
        '‡¶ï‡¶Æ‡¶≤‡¶æ ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üìÑ PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        'PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶∂‡¶® ‡¶Ö‡¶™‡¶∂‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
        'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'
      ]
    },
    {
      id: 'word-to-pdf',
      title: '‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá PDF',
      subtitle: '‡¶™‡ßç‡¶∞‡¶´‡ßá‡¶∂‡¶®‡¶æ‡¶≤ PDF ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶®',
      description: 'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶ï‡ßá ‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ PDF ‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞',
      icon: React.createElement(FileUp, { className: "w-8 h-8 text-white" }),
      gradient: 'from-teal-500 to-cyan-600',
      accept: '.doc,.docx',
      multiple: false,
      features: [
        '‡¶π‡¶æ‡¶á-‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶ø‡¶Ç',
        '‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡ßá‡¶ï‡¶∂‡¶®',
        '‡¶Æ‡ßá‡¶ü‡¶æ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£',
        '‡¶¨‡ßÅ‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü',
        '‡¶ï‡¶Æ‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶Ö‡¶™‡¶∂‡¶®'
      ],
      instructions: [
        '‡¶∏‡¶æ‡¶Ø‡¶º‡¶æ‡¶® ‡¶ó‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü "üìù ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá PDF" ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',
        'PDF ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
        '‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶Ø‡¶º)',
        'PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®'
      ]
    }
  ];

  // Counter animation effect - YOUR ORIGINAL ANIMATION
  useEffect(() => {
    const animateCounters = () => {
      const counters = document.querySelectorAll('.counter');
      counters.forEach(counter => {
        const target = parseInt(counter.getAttribute('data-count'));
        const increment = target / 100;
        let current = 0;
        
        const updateCounter = () => {
          if (current < target) {
            current += increment;
            counter.textContent = Math.ceil(current);
            setTimeout(updateCounter, 30);
          } else {
            counter.textContent = target;
          }
        };
        
        updateCounter();
      });
    };

    const timer = setTimeout(animateCounters, 1000);
    return () => clearTimeout(timer);
  }, []);

  const updateProgress = (toolId, percentage, message = '') => {
    setProgress(prev => ({ ...prev, [toolId]: percentage }));
    setProgressMessage(prev => ({ ...prev, [toolId]: message }));
  };

  const processFile = useCallback(async (files, toolId) => {
    if (!files || files.length === 0) return;

    setProcessing(prev => ({ ...prev, [toolId]: true }));
    setError(prev => ({ ...prev, [toolId]: null }));
    setResult(prev => ({ ...prev, [toolId]: null }));
    
    try {
      let result;
      
      switch (toolId) {
        case 'image-to-word':
          updateProgress(toolId, 10, '‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          await new Promise(resolve => setTimeout(resolve, 1500));
          updateProgress(toolId, 40, 'OCR ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ö‡¶æ‡¶≤‡ßÅ...');
          await new Promise(resolve => setTimeout(resolve, 2000));
          updateProgress(toolId, 70, '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶∞‡¶ø‡¶ï‡¶ó‡¶®‡¶ø‡¶∂‡¶®...');
          await new Promise(resolve => setTimeout(resolve, 1500));
          updateProgress(toolId, 90, 'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          
          // Import and use proper Word conversion
          const { convertImageToWord } = await import('./utils/imageToWord.js');
          const wordResult = await convertImageToWord(files[0], (message) => {
            updateProgress(toolId, 95, message);
          }, false); // Don't auto-download
          
          updateProgress(toolId, 98, '‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          
          // Store file for sharing
          const shareInfo = fileStorage.storeFile(
            wordResult.blob, 
            wordResult.fileName, 
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
          );
          
          result = {
            type: 'word',
            content: 'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
            filename: wordResult.fileName,
            blob: wordResult.blob,
            shareInfo: shareInfo,
            downloadReady: true
          };
          break;
          
        case 'pdf-to-image':
          updateProgress(toolId, 15, 'PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 50, '‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          
          // Import and use actual PDF to image conversion
          const { convertPdfToImages } = await import('./utils/pdfToImage.js');
          const imageResult = await convertPdfToImages(files[0], (message) => {
            updateProgress(toolId, 75, message);
          });
          
          updateProgress(toolId, 90, '‡¶õ‡¶¨‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          
          // Create a zip file with all images
          let zipBlob = imageResult.zipBlob;
          let zipFilename = imageResult.filename || ('pdf_images_' + Date.now() + '.zip');
          
          // If no zip blob, create a simple blob for testing
          if (!zipBlob && imageResult.images && imageResult.images.length > 0) {
            zipBlob = imageResult.images[0].blob;
            zipFilename = imageResult.images[0].fileName || 'converted_images.png';
          }
          
          updateProgress(toolId, 95, '‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          
          // Store file for sharing
          const imageShareInfo = zipBlob ? fileStorage.storeFile(
            zipBlob, 
            zipFilename, 
            zipBlob.type || 'application/zip'
          ) : null;
          
          result = {
            type: 'batch',
            content: imageResult.images && imageResult.images.length > 0 ? 
              imageResult.images.length + '‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§' :
              'PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
            files: imageResult.images?.map((img, index) => ({
              name: img.fileName || ('page_' + (index + 1) + '.png'),
              size: ((img.blob?.size / 1024 / 1024).toFixed(1) + ' MB') || 'Unknown',
              blob: img.blob
            })) || [
              { name: 'page_1.png', size: '2.4 MB', blob: null }
            ],
            filename: zipFilename,
            blob: zipBlob,
            shareInfo: imageShareInfo,
            downloadReady: true
          };
          break;
          
        case 'images-to-pdf':
          updateProgress(toolId, 20, '‡¶õ‡¶¨‡¶ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 60, 'AI ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶Ö‡¶™‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®...');
          
          // Import and use actual images to PDF conversion
          const { convertImagesToPdf } = await import('./utils/imageToPdf.js');
          const pdfResult = await convertImagesToPdf(Array.from(files), (message) => {
            updateProgress(toolId, 80, message);
          });
          
          updateProgress(toolId, 95, 'PDF ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          
          // Store file for sharing
          const pdfShareInfo = pdfResult.blob ? fileStorage.storeFile(
            pdfResult.blob, 
            pdfResult.filename || ('merged_images_' + Date.now() + '.pdf'), 
            'application/pdf'
          ) : null;
          
          result = {
            type: 'download',
            content: 'PDF ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
            filename: pdfResult.filename || ('merged_images_' + Date.now() + '.pdf'),
            blob: pdfResult.blob,
            shareInfo: pdfShareInfo,
            downloadReady: true
          };
          break;
          
        case 'pdf-to-word':
          updateProgress(toolId, 25, 'PDF ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 65, '‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ì ‡¶≤‡ßá‡¶Ü‡¶â‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          
          // Import and use actual PDF to Word conversion
          const { convertPdfToWord } = await import('./utils/pdfToWord.js');
          const wordFromPdfResult = await convertPdfToWord(files[0], (message) => {
            updateProgress(toolId, 85, message);
          });
          
          updateProgress(toolId, 95, 'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶Ç...');
          
          // Store file for sharing
          const pdfToWordShareInfo = wordFromPdfResult.blob ? fileStorage.storeFile(
            wordFromPdfResult.blob, 
            wordFromPdfResult.filename || ('converted_document_' + Date.now() + '.docx'), 
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
          ) : null;
          
          result = {
            type: 'download',
            content: 'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
            filename: wordFromPdfResult.filename || ('converted_document_' + Date.now() + '.docx'),
            blob: wordFromPdfResult.blob,
            shareInfo: pdfToWordShareInfo,
            downloadReady: true
          };
          break;
          
        case 'word-to-pdf':
          updateProgress(toolId, 30, 'Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
          await new Promise(resolve => setTimeout(resolve, 1000));
          updateProgress(toolId, 60, 'PDF ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶ø‡¶Ç...');
          
          // Import and use actual Word to PDF conversion
          const { convertWordToPdf } = await import('./utils/wordToPdf.js');
          const pdfFromWordResult = await convertWordToPdf(files[0], (message) => {
            updateProgress(toolId, 80, message);
          });
          
          updateProgress(toolId, 95, '‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£...');
          
          // Store file for sharing
          const wordToPdfShareInfo = pdfFromWordResult.blob ? fileStorage.storeFile(
            pdfFromWordResult.blob, 
            pdfFromWordResult.filename || ('converted_document_' + Date.now() + '.pdf'), 
            'application/pdf'
          ) : null;
          
          result = {
            type: 'download',
            content: 'PDF ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
            filename: pdfFromWordResult.filename || ('converted_document_' + Date.now() + '.pdf'),
            blob: pdfFromWordResult.blob,
            shareInfo: wordToPdfShareInfo,
            downloadReady: true
          };
          break;
          
        default:
          throw new Error('‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶ü‡ßÅ‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
      }
      
      updateProgress(toolId, 100, '‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!');
      setResult(prev => ({ ...prev, [toolId]: result }));
      toast.success('‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
      
    } catch (error) {
      console.error('Processing error:', error);
      setError(prev => ({ ...prev, [toolId]: error.message || '‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá' }));
      toast.error(error.message || '‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
    } finally {
      setProcessing(prev => ({ ...prev, [toolId]: false }));
    }
  }, []);

  const handleFileUpload = (files, toolId) => {
    const tool = bengaliTools.find(t => t.id === toolId);
    setCurrentTool(tool);
    setActiveModal(toolId);
    processFile(files, toolId);
  };

  const renderActionButtons = (toolId, toolTitle, resultData) => {
    if (!resultData) return null;

    const handleDownload = () => {
      if (resultData.blob && resultData.filename) {
        const link = document.createElement('a');
        const url = URL.createObjectURL(resultData.blob);
        link.href = url;
        link.download = resultData.filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        toast.success('‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
      } else {
        toast.error('‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§');
      }
    };

    const handleShare = (platform) => {
      const fileName = resultData.filename || 'generated_file';
      
      // Check if we have a shareable file
      if (resultData.shareInfo) {
        const { shareUrl, expiryHours } = resultData.shareInfo;
        const text = '‡¶Ü‡¶Æ‡¶ø ' + toolTitle + ' ‡¶ü‡ßÅ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá "' + fileName + '" ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø!\n\n‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®: ' + shareUrl + '\n\n‚ö†Ô∏è ‡¶è‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ' + expiryHours + ' ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶™‡¶∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶ ‡¶â‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£ ‡¶π‡¶¨‡ßá‡•§\n\nOfficeWave - ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶Ö‡¶´‡¶ø‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø AI ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ü‡ßÅ‡¶≤‡¶∏';
        
        switch (platform) {
          case 'whatsapp':
            window.open('https://wa.me/?text=' + encodeURIComponent(text), '_blank');
            break;
          case 'email':
            const subject = fileName + ' - OfficeWave AI ‡¶ü‡ßÅ‡¶≤ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶§‡ßà‡¶∞‡¶ø';
            const body = text + '\n\nOfficeWave ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: ' + window.location.origin;
            window.open('mailto:?subject=' + encodeURIComponent(subject) + '&body=' + encodeURIComponent(body), '_blank');
            break;
          case 'copy':
            navigator.clipboard.writeText(shareUrl);
            toast.success('‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ü‡¶ø ‡ß®‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§');
            break;
          case 'share':
            if (navigator.share) {
              navigator.share({
                title: fileName + ' - OfficeWave',
                text: text,
                url: shareUrl,
              });
            } else {
              navigator.clipboard.writeText(shareUrl);
              toast.success('‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
            }
            break;
        }
      } else {
        // Fallback to sharing the website
        const text = '‡¶Ü‡¶Æ‡¶ø ' + toolTitle + ' ‡¶ü‡ßÅ‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá "' + fileName + '" ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø! OfficeWave - ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶Ö‡¶´‡¶ø‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø AI ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ü‡ßÅ‡¶≤‡¶∏‡•§';
        const url = window.location.href.split('?')[0]; // Remove any query params
        
        switch (platform) {
          case 'whatsapp':
            window.open('https://wa.me/?text=' + encodeURIComponent(text + ' ' + url), '_blank');
            break;
          case 'email':
            const subject = fileName + ' - OfficeWave AI ‡¶ü‡ßÅ‡¶≤ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶§‡ßà‡¶∞‡¶ø';
            const body = text + '\n\nOfficeWave ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: ' + url;
            window.open('mailto:?subject=' + encodeURIComponent(subject) + '&body=' + encodeURIComponent(body), '_blank');
            break;
          case 'copy':
            navigator.clipboard.writeText(url);
            toast.success('‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
            break;
        }
      }
    };

    return (
      <div className="action-buttons-section">
        {/* Download Section */}
        <div className="action-buttons-container">
          <h4 className="action-title">‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°</h4>
          <div className="action-buttons">
            <button 
              className="action-button download-primary"
              onClick={handleDownload}
              title="‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"
            >
              <Download className="w-4 h-4" />
              <span>‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</span>
            </button>
            
            {resultData.shareInfo && (
              <div className="file-info">
                <p className="text-sm text-gray-600">
                  üìÅ {resultData.shareInfo.filename} ({resultData.shareInfo.size})
                </p>
                <p className="text-xs text-orange-600">
                  ‚è∞ ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶: {resultData.shareInfo.expiryHours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Share Section */}
        <div className="action-buttons-container">
          <h4 className="action-title">
            {resultData.shareInfo ? '‡¶´‡¶æ‡¶á‡¶≤ ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®' : '‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®'}
          </h4>
          <div className="action-buttons">
            {resultData.shareInfo && (
              <button 
                className="action-button copy-link"
                onClick={() => handleShare('copy')}
                title="‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®"
              >
                <Link className="w-4 h-4" />
                <span>‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶™‡¶ø</span>
              </button>
            )}
            
            <button 
              className="action-button email"
              onClick={() => handleShare('email')}
              title="‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®"
            >
              <Mail className="w-4 h-4" />
              <span>‡¶á‡¶Æ‡ßá‡¶á‡¶≤</span>
            </button>
            
            <button 
              className="action-button whatsapp"
              onClick={() => handleShare('whatsapp')}
              title="WhatsApp ‡¶è ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®"
            >
              <MessageCircle className="w-4 h-4" />
              <span>WhatsApp</span>
            </button>
            
            <button 
              className="action-button share-native"
              onClick={() => handleShare('share')}
              title="‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®"
            >
              <Share2 className="w-4 h-4" />
              <span>‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞</span>
            </button>
          </div>
        </div>

        {resultData.shareInfo && (
          <div className="share-notice">
            <div className="notice-box">
              <Clock className="w-4 h-4 text-orange-500" />
              <div className="notice-text">
                <p className="font-medium">‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡ßã‡¶ü‡¶ø‡¶∏</p>
                <p className="text-sm">‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡ß®‡ß™ ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶™‡¶∞ ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá ‡¶è‡¶ñ‡¶®‡¶á ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§</p>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
      {/* Header - YOUR ORIGINAL HEADER */}
      <header className="header-modern">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="logo-container">
                <Zap className="w-8 h-8 text-blue-600" />
              </div>
              <div className="brand-text">
                <h1 className="text-xl font-bold text-white">OfficeWave</h1>
                <p className="text-xs text-blue-100">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü AI ‡¶ü‡ßÅ‡¶≤‡¶∏</p>
              </div>
            </div>
            <nav className="nav-links hidden md:flex space-x-6">
              <a href="#image-to-word" className="nav-link">‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</a>
              <a href="#pdf-to-image" className="nav-link">PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø</a>
              <a href="#images-to-pdf" className="nav-link">‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá PDF</a>
              <a href="#pdf-to-word" className="nav-link">PDF ‡¶•‡ßá‡¶ï‡ßá ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</a>
              <a href="#word-to-pdf" className="nav-link">‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá PDF</a>
            </nav>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        {/* Stats Section - YOUR ORIGINAL STATS */}
        <section className="stats-section">
          <div className="stats-container">
            <motion.div 
              className="stat-card"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
            >
              <div className="stat-icon">
                <Users className="w-8 h-8" />
              </div>
              <div className="stat-content">
                <div className="stat-number counter" data-count="50000">0</div>
                <div className="stat-label">‡¶∏‡¶®‡ßç‡¶§‡ßÅ‡¶∑‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ</div>
              </div>
            </motion.div>

            <motion.div 
              className="stat-card"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
            >
              <div className="stat-icon">
                <FileText className="w-8 h-8" />
              </div>
              <div className="stat-content">
                <div className="stat-number counter" data-count="100000">0</div>
                <div className="stat-label">‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ú‡¶æ‡¶§</div>
              </div>
            </motion.div>

            <motion.div 
              className="stat-card"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
            >
              <div className="stat-icon">
                <Zap className="w-8 h-8" />
              </div>
              <div className="stat-content">
                <div className="stat-number counter" data-count="99">0</div>
                <div className="stat-label">% ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤‡¶§‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∞</div>
              </div>
            </motion.div>
          </div>
        </section>

        {/* Tools Grid - ALL YOUR ORIGINAL TOOLS */}
        <section className="tools-grid">
          {bengaliTools.map((tool, index) => (
            <motion.div
              key={tool.id}
              className="service-card"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              id={tool.id}
            >
              <div className="service-header">
                <div className="service-title-container">
                  <div className={'service-title-icon bg-gradient-to-r ' + tool.gradient}>
                    {tool.icon}
                  </div>
                  <div className="service-title-text">
                    <h3 className="service-title">{tool.title}</h3>
                    <p className="service-subtitle">{tool.subtitle}</p>
                  </div>
                </div>
              </div>

              <div className="service-description">
                <p>{tool.description}</p>
              </div>

              <div className="service-features">
                <ul>
                  {tool.features.map((feature, idx) => (
                    <li key={idx}>
                      <CheckCircle className="w-4 h-4 text-green-500" />
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* Upload Area */}
              <div className="upload-section">
                <div className="upload-area">
                  <div className={'upload-icon-large bg-gradient-to-r ' + tool.gradient}>
                    <Upload className="w-12 h-12 text-white" />
                  </div>
                  <div className="upload-content">
                    <h4 className="upload-title">‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</h4>
                    <p className="upload-subtitle">‡¶°‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ó ‡¶°‡ßç‡¶∞‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                    <button 
                      className="upload-button"
                      onClick={() => document.getElementById(tool.id + '-upload').click()}
                    >
                      <Upload className="w-5 h-5" />
                      <span>‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</span>
                    </button>
                    <input
                      type="file"
                      id={tool.id + '-upload'} 
                      accept={tool.accept}
                      multiple={tool.multiple}
                      className="hidden"
                      onChange={(e) => handleFileUpload(e.target.files, tool.id)}
                    />
                  </div>
                </div>

                {/* Action Buttons */}
                {result[tool.id] && renderActionButtons(tool.id, tool.title, result[tool.id])}
              </div>
            </motion.div>
          ))}
        </section>
      </main>

      {/* Footer - YOUR ORIGINAL FOOTER */}
      <footer className="footer-modern">
        <div className="container mx-auto px-4 py-8">
          <div className="footer-content">
            <div className="footer-cards">
              <div className="footer-card">
                <div className="footer-card-icon">
                  <Shield className="w-6 h-6" />
                </div>
                <div className="footer-card-content">
                  <h4>‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶ì ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§</h4>
                  <p>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ú‡¶æ‡¶§ ‡¶π‡¶Ø‡¶º</p>
                </div>
              </div>

              <div className="footer-card">
                <div className="footer-card-icon">
                  <Globe className="w-6 h-6" />
                </div>
                <div className="footer-card-content">
                  <h4>‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ ‡¶•‡ßá‡¶ï‡ßá</h4>
                  <p>‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶ú, ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶´‡¶ü‡¶ì‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ</p>
                </div>
              </div>

              <div className="footer-card">
                <div className="footer-card-icon">
                  <Database className="w-6 h-6" />
                </div>
                <div className="footer-card-content">
                  <h4>‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø</h4>
                  <p>‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡ßà‡¶∞‡¶ø AI ‡¶ü‡ßÅ‡¶≤‡¶∏</p>
                </div>
              </div>
            </div>

            <div className="footer-bottom">
              <p className="copyright">
                ¬© {new Date().getFullYear()} OfficeWave. ‡¶∏‡¶ï‡¶≤ ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§
              </p>
            </div>
          </div>
        </div>
      </footer>

      {/* Modal - YOUR ORIGINAL MODAL SYSTEM */}
      {activeModal && currentTool && (
        <div className="modal-overlay" onClick={() => setActiveModal(null)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <div className={'modal-icon bg-gradient-to-r ' + currentTool.gradient}>
                {currentTool.icon}
              </div>
              <div className="modal-title-container">
                <h3 className="modal-title">{currentTool.title}</h3>
                <p className="modal-subtitle">{currentTool.subtitle}</p>
              </div>
              <button 
                className="modal-close-button"
                onClick={() => setActiveModal(null)}
                title="‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="modal-body">
              {processing[activeModal] && (
                <div className="progress-container">
                  <div className="progress-header">
                    <h4 className="progress-title">‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶ö‡¶≤‡¶õ‡ßá...</h4>
                    <button 
                      className="progress-close-button"
                      onClick={() => setActiveModal(null)}
                      title="‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                  <div className="progress-bar-container">
                    <div 
                      className="progress-bar-fill"
                      style={{ width: (progress[activeModal] || 0) + '%' }}
                    ></div>
                  </div>
                  <p className="progress-text">{progressMessage[activeModal] || ((progress[activeModal] || 0) + '% ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®')}</p>
                </div>
              )}

              {result[activeModal] && (
                <div className="result-container">
                  <div className="result-success">
                    <CheckCircle className="w-6 h-6 text-green-500" />
                    <div>
                      <h4 className="result-title">‡¶∏‡¶´‡¶≤!</h4>
                      <p className="result-message">{result[activeModal].content}</p>
                    </div>
                  </div>

                  {renderActionButtons(activeModal, currentTool.title, result[activeModal])}
                </div>
              )}

              {error[activeModal] && (
                <div className="error-container">
                  <div className="error-message">
                    <FileX className="w-6 h-6 text-red-500" />
                    <div>
                      <h4 className="error-title">‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø</h4>
                      <p className="error-text">{error[activeModal]}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BengaliOfficeTools;
